{
	"projectName": "MaxSoft-IntelliAPI-Demo",
	"timestamp": "Nov 21, 2018 at 1:01pm",
	"successRate": 53,
	"environment": "default",
	"tags": "",
	"executionTime": 133214,
	"executionStatus": "fail",
	"specResults": [
		{
			"specHeading": "Request Placeholders Specification",
			"fileName": "C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\specs\\Other\\06. Request Placeholders.spec",
			"tags": [],
			"executionTime": 6479,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Saving values to Data Store",
					"tags": [],
					"executionTime": 0,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user save the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"Osanda12"
										]
									},
									{
										"cells": [
											"Specification",
											"username",
											"Osanda12"
										]
									},
									{
										"cells": [
											"Specification",
											"password",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"Osanda12\" is successfully saved as a text in Scenario Data Store [username]",
									"\"Osanda12\" is successfully saved as a text in Specification Data Store [username]",
									"\"Password1\" is successfully saved as a text in Specification Data Store [password]"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Replace request placeholders from values",
					"tags": [],
					"executionTime": 1945,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 42,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request payload as follows \u003cfile:/resources/payloads/login_placeholders.txt\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"#username\",\r\n \"password\": \"#password\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set values to the request payload placeholders as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"osanda12"
										]
									},
									{
										"cells": [
											"#password",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The final JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"osanda12\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1903,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1786ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2NDEzLCJpYXQiOjE1NDI3ODU2MTIsInNlc3NpZCI6IjczM2IwNDc2LTY0ZWUtNDkzOS1iNDU4LWFkZDI2ZGI2OThjNCJ9.KIMCrze8Wx8j_AsZkZlj9r_23P05go4c8ybmZwr-zL8oiVzLygYBCBf-LrLw30HlXe1Y4WRW8kBaGXUSUbFfTGCt8bhF95znHUeIhoITkyC6CaPWtoXGGFwFCv3B0NaIgt4TIghLCSbSOFm-aZuVY6xUYBFim_DLZ5T7ofbQbbE\"\n}\n\n",
									"Response Headers are: \nServer=Apache-Coyote/1.1\nCorrelation-Id=989e5ca7-829d-4635-9dda-b59b5d179b54\nLocation=https://pi-int.pearsoned.com/v1/piapi-int/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2NDEzLCJpYXQiOjE1NDI3ODU2MTIsInNlc3NpZCI6IjczM2IwNDc2LTY0ZWUtNDkzOS1iNDU4LWFkZDI2ZGI2OThjNCJ9.KIMCrze8Wx8j_AsZkZlj9r_23P05go4c8ybmZwr-zL8oiVzLygYBCBf-LrLw30HlXe1Y4WRW8kBaGXUSUbFfTGCt8bhF95znHUeIhoITkyC6CaPWtoXGGFwFCv3B0NaIgt4TIghLCSbSOFm-aZuVY6xUYBFim_DLZ5T7ofbQbbE\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Wed, 21 Nov 2018 07:33:32 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Replace one request placeholders from values",
					"tags": [],
					"executionTime": 1425,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 47,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request payload as follows \u003cfile:/resources/payloads/login_placeholder.txt\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"#username\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set values to the request payload placeholders as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"osanda12"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The final JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"osanda12\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1378,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1251ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2NDE0LCJpYXQiOjE1NDI3ODU2MTQsInNlc3NpZCI6IjkxOGZhMDQ5LTJhMDYtNGIxOS1hMzI5LTE5NjFiOWQ2YTgzZiJ9.Izq8mfQ5rrU4eXmpGe589e_589QWqJf4edr_Nn5yFJi3WyYFFjIGQlYmsyCTwTnNenL7YAeqnn-G-AQOUIMWCEOTfRm8L3qEpF9KqFL3GJrSF_aVuqXY4T8wQBYIcPANTU2r2pu77Q1ZhmkrWVbb-QRGVdtXJODXUa12GUxK62Y\"\n}\n\n",
									"Response Headers are: \nServer=Apache-Coyote/1.1\nCorrelation-Id=33f5488b-5949-45d3-a958-a02b7507f843\nLocation=https://pi-int.pearsoned.com/v1/piapi-int/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2NDE0LCJpYXQiOjE1NDI3ODU2MTQsInNlc3NpZCI6IjkxOGZhMDQ5LTJhMDYtNGIxOS1hMzI5LTE5NjFiOWQ2YTgzZiJ9.Izq8mfQ5rrU4eXmpGe589e_589QWqJf4edr_Nn5yFJi3WyYFFjIGQlYmsyCTwTnNenL7YAeqnn-G-AQOUIMWCEOTfRm8L3qEpF9KqFL3GJrSF_aVuqXY4T8wQBYIcPANTU2r2pu77Q1ZhmkrWVbb-QRGVdtXJODXUa12GUxK62Y\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Wed, 21 Nov 2018 07:33:34 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Replace request placeholders from data store values",
					"tags": [],
					"executionTime": 1514,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 43,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request payload as follows \u003cfile:/resources/payloads/login_placeholders.txt\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"#username\",\r\n \"password\": \"#password\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set values to the request payload placeholders using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"y",
											"spec",
											"username",
											""
										]
									},
									{
										"cells": [
											"#password",
											"y",
											"spec",
											"password",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [username] is: \"Osanda12\"\n\n",
									"Text inside Specification Data Store [password] is: \"Password1\"\n\n",
									"The final JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"Osanda12\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1471,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1338ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2NDE2LCJpYXQiOjE1NDI3ODU2MTUsInNlc3NpZCI6ImIyMzY5NTc1LWM1YzMtNGEyOC05ODcyLTE4MGExMjRkZmI1ZSJ9.MgeR-Xk88oMZfYz04IujPUzbLczG8-5z3HVYNz74znLIZ-ZnVGljz3NGlJSBc5eENNop8S9_L0SKkJhrCpLcJkYMONF5e6_ToI01CR6vkre2LDfH-7fsqsT1vj6VvGlTVKGLyNxzgdrOMCCDbiTAz782qANrAUcxKLiHaScSgD8\"\n}\n\n",
									"Response Headers are: \nServer=Apache-Coyote/1.1\nCorrelation-Id=5462a17f-2b31-4164-948c-8db99fa88ff7\nLocation=https://pi-int.pearsoned.com/v1/piapi-int/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2NDE2LCJpYXQiOjE1NDI3ODU2MTUsInNlc3NpZCI6ImIyMzY5NTc1LWM1YzMtNGEyOC05ODcyLTE4MGExMjRkZmI1ZSJ9.MgeR-Xk88oMZfYz04IujPUzbLczG8-5z3HVYNz74znLIZ-ZnVGljz3NGlJSBc5eENNop8S9_L0SKkJhrCpLcJkYMONF5e6_ToI01CR6vkre2LDfH-7fsqsT1vj6VvGlTVKGLyNxzgdrOMCCDbiTAz782qANrAUcxKLiHaScSgD8\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Wed, 21 Nov 2018 07:33:35 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Replace one request placeholder from data store values",
					"tags": [],
					"executionTime": 1595,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 45,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request payload as follows \u003cfile:/resources/payloads/login_placeholders.txt\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"#username\",\r\n \"password\": \"#password\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set values to the request payload placeholders using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"y",
											"spec",
											"username",
											""
										]
									},
									{
										"cells": [
											"#password",
											"n",
											"",
											"",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [username] is: \"Osanda12\"\n\n",
									"The final JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"Osanda12\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1550,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1402ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2NDE3LCJpYXQiOjE1NDI3ODU2MTcsInNlc3NpZCI6ImVlNzdhODNhLTUwODktNGMzNS1hNDBhLWUyZjQ3YTQ5YzQ3OCJ9.TCFPhpLdQXhAjWTAjEBawlMRMmJYGb3pEv123vnETU7XS4gOTl2LnQnZWkLW3F_oVSRFuACrehX46-YlxpF7_g44gq6jrMx3pfXp-sHUhqFIlBiteCucAPL3IcWprQHGIBZOJU6Wa5af7rWfDZjXSkijByXmJT4Ey3cl6GHsmdg\"\n}\n\n",
									"Response Headers are: \nServer=Apache-Coyote/1.1\nCorrelation-Id=c839257d-eb2d-4c56-a96c-2ddfa13d408e\nLocation=https://pi-int.pearsoned.com/v1/piapi-int/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2NDE3LCJpYXQiOjE1NDI3ODU2MTcsInNlc3NpZCI6ImVlNzdhODNhLTUwODktNGMzNS1hNDBhLWUyZjQ3YTQ5YzQ3OCJ9.TCFPhpLdQXhAjWTAjEBawlMRMmJYGb3pEv123vnETU7XS4gOTl2LnQnZWkLW3F_oVSRFuACrehX46-YlxpF7_g44gq6jrMx3pfXp-sHUhqFIlBiteCucAPL3IcWprQHGIBZOJU6Wa5af7rWfDZjXSkijByXmJT4Ey3cl6GHsmdg\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Wed, 21 Nov 2018 07:33:36 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 5,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Read from saved CSV Specification",
			"fileName": "C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\specs\\Other\\07. Read from saved CSV.spec",
			"tags": [],
			"executionTime": 6988,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 857,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 56,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5bc3377caadd6d001093fc3e"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5bc3377caadd6d001093fc3e\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 801,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions/5bc3377caadd6d001093fc3e\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 671ms\n\n",
									"Response is: \n{\n    \"message\": \"Couldn't find question with id : 5bc3377caadd6d001093fc3e\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=4ec709a6-c259-4c42-b3a5-8a3202d0bf02\nDate=Wed, 21 Nov 2018 07:33:38 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=125\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1174)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:392)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:182)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [204] but found [404]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 0
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 710,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 54,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5bc3377eaadd6d001093fc3f"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5bc3377eaadd6d001093fc3f\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 656,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions/5bc3377eaadd6d001093fc3f\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 518ms\n\n",
									"Response is: \n{\n    \"message\": \"Couldn't find question with id : 5bc3377eaadd6d001093fc3f\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=7e4b780d-4865-4b02-876a-fbab134235e0\nDate=Wed, 21 Nov 2018 07:33:38 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=125\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1174)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:392)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:182)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [204] but found [404]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 1
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 804,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 46,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5bc33780aadd6d001093fc40"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5bc33780aadd6d001093fc40\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 758,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions/5bc33780aadd6d001093fc40\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 629ms\n\n",
									"Response is: \n{\n    \"message\": \"Couldn't find question with id : 5bc33780aadd6d001093fc40\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=4f57e59b-5ae9-4d80-9549-92df9d586336\nDate=Wed, 21 Nov 2018 07:33:39 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=125\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1174)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:392)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:182)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [204] but found [404]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 2
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 828,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 49,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5bc33781aadd6d001093fc41"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5bc33781aadd6d001093fc41\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 779,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions/5bc33781aadd6d001093fc41\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 642ms\n\n",
									"Response is: \n{\n    \"message\": \"Couldn't find question with id : 5bc33781aadd6d001093fc41\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=0e89badb-16af-4023-9f8c-d653b991916b\nDate=Wed, 21 Nov 2018 07:33:40 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=125\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1174)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:392)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:182)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [204] but found [404]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 3
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 827,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 44,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5bc33782aadd6d001093fc42"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5bc33782aadd6d001093fc42\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 783,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions/5bc33782aadd6d001093fc42\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 643ms\n\n",
									"Response is: \n{\n    \"message\": \"Couldn't find question with id : 5bc33782aadd6d001093fc42\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=9871ee06-2689-4ec3-8337-48994d681213\nDate=Wed, 21 Nov 2018 07:33:41 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=125\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1174)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:392)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:182)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [204] but found [404]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 4
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 708,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 45,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5bc33784aadd6d001093fc43"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5bc33784aadd6d001093fc43\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 663,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions/5bc33784aadd6d001093fc43\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 537ms\n\n",
									"Response is: \n{\n    \"message\": \"Couldn't find question with id : 5bc33784aadd6d001093fc43\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=28b51d09-b169-4941-a3db-e20f7256a88a\nDate=Wed, 21 Nov 2018 07:33:41 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=125\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1174)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:392)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:182)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [204] but found [404]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 5
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 795,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 53,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5bc33785aadd6d001093fc44"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5bc33785aadd6d001093fc44\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 742,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions/5bc33785aadd6d001093fc44\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 605ms\n\n",
									"Response is: \n{\n    \"message\": \"Couldn't find question with id : 5bc33785aadd6d001093fc44\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=40b03365-6959-4500-b7ff-1f1a6106db64\nDate=Wed, 21 Nov 2018 07:33:42 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=125\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1174)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:392)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:182)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [204] but found [404]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 6
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 776,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 49,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5bc33786aadd6d001093fc45"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5bc33786aadd6d001093fc45\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 727,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions/5bc33786aadd6d001093fc45\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 589ms\n\n",
									"Response is: \n{\n    \"message\": \"Couldn't find question with id : 5bc33786aadd6d001093fc45\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=1a06e78d-f0b2-4288-9d29-56ccecccd234\nDate=Wed, 21 Nov 2018 07:33:43 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=125\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1174)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:392)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:182)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [204] but found [404]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 7
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 683,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 50,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5bc33787aadd6d001093fc46"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5bc33787aadd6d001093fc46\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 633,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions/5bc33787aadd6d001093fc46\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 493ms\n\n",
									"Response is: \n{\n    \"message\": \"Couldn't find question with id : 5bc33787aadd6d001093fc46\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=438c88e1-d41a-4bd0-a380-e21c0c22896c\nDate=Wed, 21 Nov 2018 07:33:44 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=125\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1174)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:392)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:182)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [204] but found [404]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 8
				}
			],
			"isTableDriven": true,
			"datatable": {
				"headers": [
					"questionId"
				],
				"rows": [
					{
						"cells": [
							"5bc3377caadd6d001093fc3e"
						]
					},
					{
						"cells": [
							"5bc3377eaadd6d001093fc3f"
						]
					},
					{
						"cells": [
							"5bc33780aadd6d001093fc40"
						]
					},
					{
						"cells": [
							"5bc33781aadd6d001093fc41"
						]
					},
					{
						"cells": [
							"5bc33782aadd6d001093fc42"
						]
					},
					{
						"cells": [
							"5bc33784aadd6d001093fc43"
						]
					},
					{
						"cells": [
							"5bc33785aadd6d001093fc44"
						]
					},
					{
						"cells": [
							"5bc33786aadd6d001093fc45"
						]
					},
					{
						"cells": [
							"5bc33787aadd6d001093fc46"
						]
					}
				]
			},
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 0,
			"failedScenarioCount": 1,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Saving to Data Stores Specification",
			"fileName": "C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\specs\\Data Stores\\01. Saving to Data Stores.spec",
			"tags": [],
			"executionTime": 663,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Saving to Data Stores",
					"tags": [],
					"executionTime": 657,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user save the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1",
											"Osanda Deshan"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3",
											"Software Automation"
										]
									},
									{
										"cells": [
											"Suite",
											"variable4",
											"Gauge Framework"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 651,
								"skippedReason": "",
								"messages": [
									"\"Osanda Deshan\" is successfully saved as a text in Scenario Data Store [variable1]",
									"\"Osanda Nimalarathna\" is successfully saved as a text in Specification Data Store [variable2]",
									"\"Software Automation\" is successfully saved as a text in Scenario Data Store [variable3]",
									"\"Gauge Framework\" is successfully saved as a text in Suite Data Store [variable4]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores equal to the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1",
											"Osanda Deshan"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3",
											"Software Automation"
										]
									},
									{
										"cells": [
											"Suite",
											"variable4",
											"Gauge Framework"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 4,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable1] is: \"Osanda Deshan\"\n\n",
									"Text inside Specification Data Store [variable2] is: \"Osanda Nimalarathna\"\n\n",
									"Text inside Scenario Data Store [variable3] is: \"Software Automation\"\n\n",
									"Text inside Suite Data Store [variable4] is: \"Gauge Framework\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user saves environment property file data into data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Attribute Name In Property File"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"mongoHost",
											"mongo_database_host"
										]
									},
									{
										"cells": [
											"Specification",
											"mongoPort",
											"mongo_database_port"
										]
									},
									{
										"cells": [
											"Scenario",
											"mysqlUrl",
											"mysql_database_url"
										]
									},
									{
										"cells": [
											"Suite",
											"headerName",
											"header_name_for_authorization"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"\"10.199.253.208\" is successfully saved as a text in Scenario Data Store [mongoHost]",
									"\"27017\" is successfully saved as a text in Specification Data Store [mongoPort]",
									"\"jdbc:mysql://localhost:3306/user\" is successfully saved as a text in Scenario Data Store [mysqlUrl]",
									"\"X-Authorization\" is successfully saved as a text in Suite Data Store [headerName]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores equal to the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"mongoHost",
											"10.199.253.208"
										]
									},
									{
										"cells": [
											"Specification",
											"mongoPort",
											"27017"
										]
									},
									{
										"cells": [
											"Scenario",
											"mysqlUrl",
											"jdbc:mysql://localhost:3306/user"
										]
									},
									{
										"cells": [
											"Suite",
											"headerName",
											"X-Authorization"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [mongoHost] is: \"10.199.253.208\"\n\n",
									"Text inside Specification Data Store [mongoPort] is: \"27017\"\n\n",
									"Text inside Scenario Data Store [mysqlUrl] is: \"jdbc:mysql://localhost:3306/user\"\n\n",
									"Text inside Suite Data Store [headerName] is: \"X-Authorization\"\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Reading values from Data Store",
					"tags": [],
					"executionTime": 6,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user read the values from data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3"
										]
									},
									{
										"cells": [
											"Suite",
											"variable4"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 5,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable1] is: \"null\"\n\n",
									"Text inside Specification Data Store [variable2] is: \"Osanda Nimalarathna\"\n\n",
									"Text inside Scenario Data Store [variable3] is: \"null\"\n\n",
									"Text inside Suite Data Store [variable4] is: \"Gauge Framework\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores equal to the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Specification",
											"variable2",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Suite",
											"variable4",
											"Gauge Framework"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [variable2] is: \"Osanda Nimalarathna\"\n\n",
									"Text inside Suite Data Store [variable4] is: \"Gauge Framework\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores not equal to the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1",
											"Osanda Deshan"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3",
											"Software Automation"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable1] is: \"null\"\n\n",
									"Text inside Scenario Data Store [variable3] is: \"null\"\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 2,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Reading Values from Data Stores Specification",
			"fileName": "C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\specs\\Data Stores\\02. Reading Values from Data Stores.spec",
			"tags": [],
			"executionTime": 3,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Reading Values from Data Stores",
					"tags": [],
					"executionTime": 3,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user read the values from data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name"
								],
								"rows": [
									{
										"cells": [
											"Suite",
											"variable4"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3,
								"skippedReason": "",
								"messages": [
									"Text inside Suite Data Store [variable4] is: \"Gauge Framework\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores equal to the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Suite",
											"variable4",
											"Gauge Framework"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Suite Data Store [variable4] is: \"Gauge Framework\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores not equal to the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1",
											"Osanda Deshan"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3",
											"Software Automation"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable1] is: \"null\"\n\n",
									"Text inside Specification Data Store [variable2] is: \"null\"\n\n",
									"Text inside Scenario Data Store [variable3] is: \"null\"\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 1,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Saving And Reading Values From Data Store Specification",
			"fileName": "C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\specs\\Data Stores\\03. Saving And Reading Values From Data Store.spec",
			"tags": [],
			"executionTime": 13484,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "Get configurations of the testing environment",
					"tags": [],
					"executionTime": 4,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Configurations of the testing environment",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 4,
								"skippedReason": "",
								"messages": [
									"Configurations of Test Execution Environment\n\n",
									"Operating System: Windows 10",
									"Environment: QA",
									"Base URL: "
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Saving values to Data Store",
					"tags": [],
					"executionTime": 5,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user save the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1",
											"Osanda Deshan"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3",
											"Software Automation"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 5,
								"skippedReason": "",
								"messages": [
									"\"Osanda Deshan\" is successfully saved as a text in Scenario Data Store [variable1]",
									"\"Osanda Nimalarathna\" is successfully saved as a text in Specification Data Store [variable2]",
									"\"Software Automation\" is successfully saved as a text in Scenario Data Store [variable3]"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Reading values from Data Store",
					"tags": [],
					"executionTime": 12,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user read the values from data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 12,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable1] is: \"null\"\n\n",
									"Text inside Specification Data Store [variable2] is: \"Osanda Nimalarathna\"\n\n",
									"Text inside Scenario Data Store [variable3] is: \"null\"\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Invoke PI API in Staging Environment using valid username and password using payload text file",
					"tags": [
						"get_pi_token",
						"staging"
					],
					"executionTime": 5951,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1184,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"No"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"N/A"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request payload as follows \u003cfile:/resources/payloads/login.txt\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 156,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"osanda12\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 4501,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 3285ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2MzAxLCJpYXQiOjE1NDI3ODU1MDAsInNlc3NpZCI6ImZhZGMxMjc3LTI0ZGMtNGRhNy05YzIyLTVjODk5NWE5N2JkMCJ9.BgBTfWQCRRbf1TakCZBIUL8BVF5_OAGgk4JpFemjCyM9uGzh-5GBKRpS6BNZNfToFnpOoyXjiDn7NdrSDVQGke4g0kYWOL6n5kvR8Dj4CE_wn2Ciopz6bRLwwoHyZzXmWvQYUHaiY-0w_niiSWnQhdvUP6Bq3K_eIrK9699f7GE\"\n}\n\n",
									"Response Headers are: \nServer=Apache-Coyote/1.1\nCorrelation-Id=c317d689-d24e-4385-91b0-4fab1f237991\nLocation=https://pi-int.pearsoned.com/v1/piapi-int/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2MzAxLCJpYXQiOjE1NDI3ODU1MDAsInNlc3NpZCI6ImZhZGMxMjc3LTI0ZGMtNGRhNy05YzIyLTVjODk5NWE5N2JkMCJ9.BgBTfWQCRRbf1TakCZBIUL8BVF5_OAGgk4JpFemjCyM9uGzh-5GBKRpS6BNZNfToFnpOoyXjiDn7NdrSDVQGke4g0kYWOL6n5kvR8Dj4CE_wn2Ciopz6bRLwwoHyZzXmWvQYUHaiY-0w_niiSWnQhdvUP6Bq3K_eIrK9699f7GE\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Wed, 21 Nov 2018 07:31:40 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 101,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Existence in the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"isExists"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"true"
										]
									},
									{
										"cells": [
											"$.osa",
											"false"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the access token in the response which is located inside the JSON Path of \"$.data\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 8,
								"skippedReason": "",
								"messages": [
									"Successfully saved the access token into the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\""
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable4",
											"$.status"
										]
									},
									{
										"cells": [
											"Specification",
											"variable5",
											"$.data"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"success\" is successfully saved as a text in Scenario Data Store [variable4]",
									"\"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2MzAxLCJpYXQiOjE1NDI3ODU1MDAsInNlc3NpZCI6ImZhZGMxMjc3LTI0ZGMtNGRhNy05YzIyLTVjODk5NWE5N2JkMCJ9.BgBTfWQCRRbf1TakCZBIUL8BVF5_OAGgk4JpFemjCyM9uGzh-5GBKRpS6BNZNfToFnpOoyXjiDn7NdrSDVQGke4g0kYWOL6n5kvR8Dj4CE_wn2Ciopz6bRLwwoHyZzXmWvQYUHaiY-0w_niiSWnQhdvUP6Bq3K_eIrK9699f7GE\" is successfully saved as a text in Specification Data Store [variable5]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user read the values from data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable4"
										]
									},
									{
										"cells": [
											"Specification",
											"variable5"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable4] is: \"success\"\n\n",
									"Text inside Specification Data Store [variable5] is: \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2MzAxLCJpYXQiOjE1NDI3ODU1MDAsInNlc3NpZCI6ImZhZGMxMjc3LTI0ZGMtNGRhNy05YzIyLTVjODk5NWE5N2JkMCJ9.BgBTfWQCRRbf1TakCZBIUL8BVF5_OAGgk4JpFemjCyM9uGzh-5GBKRpS6BNZNfToFnpOoyXjiDn7NdrSDVQGke4g0kYWOL6n5kvR8Dj4CE_wn2Ciopz6bRLwwoHyZzXmWvQYUHaiY-0w_niiSWnQhdvUP6Bq3K_eIrK9699f7GE\"\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Invoke PI API in Staging Environment using valid username and password and save the access token inside the text file",
					"tags": [
						"get_pi_token",
						"staging"
					],
					"executionTime": 2049,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 212,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user save the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"osanda12"
										]
									},
									{
										"cells": [
											"Specification",
											"variable6",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable7",
											"Software Automation"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"osanda12\" is successfully saved as a text in Scenario Data Store [username]",
									"\"Osanda Nimalarathna\" is successfully saved as a text in Specification Data Store [variable6]",
									"\"Software Automation\" is successfully saved as a text in Scenario Data Store [variable7]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request headers using data stores as follows",
							"table": {
								"headers": [
									"Header Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Header Value"
								],
								"rows": [
									{
										"cells": [
											"header1",
											"y",
											"spec",
											"variable6",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [variable6] is: \"Osanda Nimalarathna\"\n\n",
									"Header List: ",
									"header1 = Osanda Nimalarathna"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"y",
											"scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"#password",
											"n",
											"N/A",
											"N/A",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 97,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n \"userName\": \"osanda12\",\n \"password\": \"Password1\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1732,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1288ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2MzAzLCJpYXQiOjE1NDI3ODU1MDMsInNlc3NpZCI6ImQ3YTg2ZTdhLTEyOGYtNDQ0MC04ZjU0LTExN2NjYjQxZTAyOCJ9.PwG_Mzf5zrtSk3eLvxIivYYF0u7xeSSWO7Fe8q9oK_ESzvO2mwvrDmHwiNb4T0gz1k6v8vRRoNdaJOCsxbSHtJ19BAEcixu0v427PNnkAJIOXaQ_0ywY7y8u0STegNI3LAhyQkorBYCZ_FIxh9seT__DnMTxKZyKbizAq87wHSg\"\n}\n\n",
									"Response Headers are: \nServer=Apache-Coyote/1.1\nCorrelation-Id=bdad4acb-9afb-4484-8785-00740f476e3e\nLocation=https://pi-int.pearsoned.com/v1/piapi-int/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2MzAzLCJpYXQiOjE1NDI3ODU1MDMsInNlc3NpZCI6ImQ3YTg2ZTdhLTEyOGYtNDQ0MC04ZjU0LTExN2NjYjQxZTAyOCJ9.PwG_Mzf5zrtSk3eLvxIivYYF0u7xeSSWO7Fe8q9oK_ESzvO2mwvrDmHwiNb4T0gz1k6v8vRRoNdaJOCsxbSHtJ19BAEcixu0v427PNnkAJIOXaQ_0ywY7y8u0STegNI3LAhyQkorBYCZ_FIxh9seT__DnMTxKZyKbizAq87wHSg\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Wed, 21 Nov 2018 07:31:42 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"status",
											"$.status"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"success\" is successfully saved as a text in Scenario Data Store [status]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"isContains"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"y",
											"scenario",
											"status",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should not contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"notContains"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should not contains the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"y",
											"scenario",
											"variable7",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable7] is: \"Software Automation\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should not be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"y",
											"scenario",
											"status",
											"N/A"
										]
									},
									{
										"cells": [
											"$.status",
											"n",
											"N/A",
											"N/A",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should not be equal to the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"n",
											"N/A",
											"N/A",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the access token in the response which is located inside the JSON Path of \"$.data\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3,
								"skippedReason": "",
								"messages": [
									"Successfully saved the access token into the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\""
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Existence in the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"isExists"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"true"
										]
									},
									{
										"cells": [
											"$.osa",
											"false"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the query parameters using data stores as follows",
							"table": {
								"headers": [
									"Query Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Query Value"
								],
								"rows": [
									{
										"cells": [
											"username",
											"y",
											"scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"password",
											"n",
											"N/A",
											"N/A",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Query parameters which will append to the request URL: ?username=osanda12\u0026password=Password1\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"y",
											"scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"#password",
											"n",
											"N/A",
											"N/A",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Path parameters which will append to the request URL:/osanda12/Password1\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Invoke PI API in Staging Environment using valid username and password using request attributes from text files",
					"tags": [
						"get_pi_token",
						"staging"
					],
					"executionTime": 1941,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 120,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user save the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"osanda12"
										]
									},
									{
										"cells": [
											"Specification",
											"variable6",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable7",
											"Software Automation"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"osanda12\" is successfully saved as a text in Scenario Data Store [username]",
									"\"Osanda Nimalarathna\" is successfully saved as a text in Specification Data Store [variable6]",
									"\"Software Automation\" is successfully saved as a text in Scenario Data Store [variable7]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request headers using data stores as follows",
							"table": {
								"headers": [
									"Header Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Header Value"
								],
								"rows": [
									{
										"cells": [
											"header1",
											"n",
											"",
											"",
											"header1"
										]
									},
									{
										"cells": [
											"header2",
											"n",
											"",
											"",
											"header1"
										]
									},
									{
										"cells": [
											"header3",
											"n",
											"",
											"",
											"header1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Header List: ",
									"header1 = header1",
									"header2 = header1",
									"header3 = header1"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"y",
											"scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"#password",
											"n",
											"N/A",
											"N/A",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 61,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n \"userName\": \"osanda12\",\n \"password\": \"Password1\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1749,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1422ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2MzA1LCJpYXQiOjE1NDI3ODU1MDUsInNlc3NpZCI6IjdhMGZjMTBjLWQ1ODEtNDZlYi1hMzg3LWY5ZDUzOTMwNTMyNiJ9.MPZV4THxpVK1whOsRD6_0bsMcN8i68jKhvta6Cu8LAYg8KVKXYsuZZqhWJbzRiM-Ey5mpC9oS2l_lHsv8IPiKjQqRPzjrRDz8fPJuEaS9x3-3sFRRGzCtgdheSIlkClOBwl7oHyPBC3xqdCzJziAoqfHtjpQycP1F5eA2TUOraE\"\n}\n\n",
									"Response Headers are: \nServer=Apache-Coyote/1.1\nCorrelation-Id=fcb23f8b-ccca-4751-b4cc-e7aa41a82e56\nLocation=https://pi-int.pearsoned.com/v1/piapi-int/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2MzA1LCJpYXQiOjE1NDI3ODU1MDUsInNlc3NpZCI6IjdhMGZjMTBjLWQ1ODEtNDZlYi1hMzg3LWY5ZDUzOTMwNTMyNiJ9.MPZV4THxpVK1whOsRD6_0bsMcN8i68jKhvta6Cu8LAYg8KVKXYsuZZqhWJbzRiM-Ey5mpC9oS2l_lHsv8IPiKjQqRPzjrRDz8fPJuEaS9x3-3sFRRGzCtgdheSIlkClOBwl7oHyPBC3xqdCzJziAoqfHtjpQycP1F5eA2TUOraE\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Wed, 21 Nov 2018 07:31:44 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"status",
											"$.status"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"success\" is successfully saved as a text in Scenario Data Store [status]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"isContains"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"y",
											"scenario",
											"status",
											"N/A"
										]
									},
									{
										"cells": [
											"$.status",
											"n",
											"",
											"",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should not contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"notContains"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should not contains the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"y",
											"scenario",
											"variable7",
											"N/A"
										]
									},
									{
										"cells": [
											"$.status",
											"n",
											"",
											"",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable7] is: \"Software Automation\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									},
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should not be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"fail"
										]
									},
									{
										"cells": [
											"$.status",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"y",
											"scenario",
											"status",
											"N/A"
										]
									},
									{
										"cells": [
											"$.status",
											"n",
											"N/A",
											"N/A",
											"success"
										]
									},
									{
										"cells": [
											"$.status",
											"n",
											"N/A",
											"N/A",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should not be equal to the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"n",
											"N/A",
											"N/A",
											"fail"
										]
									},
									{
										"cells": [
											"$.status",
											"n",
											"N/A",
											"N/A",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the access token in the response which is located inside the JSON Path of \"$.data\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 4,
								"skippedReason": "",
								"messages": [
									"Successfully saved the access token into the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\""
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Existence in the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"isExists"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"true"
										]
									},
									{
										"cells": [
											"$.osa",
											"false"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the query parameters as follows",
							"table": {
								"headers": [
									"Query Parameter",
									"Query Value"
								],
								"rows": [
									{
										"cells": [
											"Id",
											"osanda12"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Query parameters which will append to the request URL: ?Id=osanda12\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"Id",
											"osanda12"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/osanda12\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the query parameters using data stores as follows",
							"table": {
								"headers": [
									"Query Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Query Value"
								],
								"rows": [
									{
										"cells": [
											"username",
											"y",
											"scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"password",
											"n",
											"N/A",
											"N/A",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Query parameters which will append to the request URL: ?username=osanda12\u0026password=Password1\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"y",
											"scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"#password",
											"n",
											"N/A",
											"N/A",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Path parameters which will append to the request URL:/osanda12/Password1\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Replace API Endpoint placeholders - Scenario 1",
					"tags": [],
					"executionTime": 1142,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Purchase Validator API\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 117,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://www.googleapis.com/androidpublisher/v3/applications/com.pearsoned.smartflashcards/purchases/products/#skuid/tokens/#purchaseToken?access_token=#access_token\n\n",
									"HTTP Method is: GET\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set values to the API endpoint placeholders as follows",
							"table": {
								"headers": [
									"Placeholder In JSON Template",
									"Replacement Text"
								],
								"rows": [
									{
										"cells": [
											"#skuid",
											"com.pearsoned.smartflashcards.expert.elementary"
										]
									},
									{
										"cells": [
											"#purchaseToken",
											"jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0vhCEpnsaQzG4LiWlLPnzZZ8lurqkUwQOdEayJt-594AJ0ZXAD157IP8l0v-pHedljh50abW2HG50dAdzOQcLz_mE_5oqOApbkuC2X4mOlf8vJ09qul3zrAy30O3luyUqwOUOkJ1L2XhwrLhKROMAMXpx11t81UENIUxq0zaE"
										]
									},
									{
										"cells": [
											"#access_token",
											"ya29.Gl02BlxksX1OjOxBRrI2znyQc3xdqvDXkh0NU7GxEw5_2EfMvysYUNqjhcLTj8BaO9GIk6KJQBbEMzYde7tDCCUNCyW_fGlHr-9mHplWfr69Vwdz2xnvhfZcLPjCvcA"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 55,
								"skippedReason": "",
								"messages": [
									"https://www.googleapis.com/androidpublisher/v3/applications/com.pearsoned.smartflashcards/purchases/products/com.pearsoned.smartflashcards.expert.elementary/tokens/jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0vhCEpnsaQzG4LiWlLPnzZZ8lurqkUwQOdEayJt-594AJ0ZXAD157IP8l0v-pHedljh50abW2HG50dAdzOQcLz_mE_5oqOApbkuC2X4mOlf8vJ09qul3zrAy30O3luyUqwOUOkJ1L2XhwrLhKROMAMXpx11t81UENIUxq0zaE?access_token=ya29.Gl02BlxksX1OjOxBRrI2znyQc3xdqvDXkh0NU7GxEw5_2EfMvysYUNqjhcLTj8BaO9GIk6KJQBbEMzYde7tDCCUNCyW_fGlHr-9mHplWfr69Vwdz2xnvhfZcLPjCvcA"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 969,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://www.googleapis.com/androidpublisher/v3/applications/com.pearsoned.smartflashcards/purchases/products/com.pearsoned.smartflashcards.expert.elementary/tokens/jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0vhCEpnsaQzG4LiWlLPnzZZ8lurqkUwQOdEayJt-594AJ0ZXAD157IP8l0v-pHedljh50abW2HG50dAdzOQcLz_mE_5oqOApbkuC2X4mOlf8vJ09qul3zrAy30O3luyUqwOUOkJ1L2XhwrLhKROMAMXpx11t81UENIUxq0zaE?access_token=ya29.Gl02BlxksX1OjOxBRrI2znyQc3xdqvDXkh0NU7GxEw5_2EfMvysYUNqjhcLTj8BaO9GIk6KJQBbEMzYde7tDCCUNCyW_fGlHr-9mHplWfr69Vwdz2xnvhfZcLPjCvcA\n\n",
									"HTTP Method is: GET\n\n",
									"Response Time is: 737ms\n\n",
									"Response is: \n{\n    \"error\": {\n        \"errors\": [\n            {\n                \"domain\": \"global\",\n                \"reason\": \"authError\",\n                \"message\": \"Invalid Credentials\",\n                \"locationType\": \"header\",\n                \"location\": \"Authorization\"\n            }\n        ],\n        \"code\": 401,\n        \"message\": \"Invalid Credentials\"\n    }\n}\n\n",
									"Response Headers are: \nVary=Origin\nVary=X-Origin\nWWW-Authenticate=Bearer realm=\"https://accounts.google.com/\", error=invalid_token\nContent-Type=application/json; charset=UTF-8\nContent-Encoding=gzip\nDate=Wed, 21 Nov 2018 07:31:46 GMT\nExpires=Wed, 21 Nov 2018 07:31:46 GMT\nCache-Control=private, max-age=0\nX-Content-Type-Options=nosniff\nX-Frame-Options=SAMEORIGIN\nX-XSS-Protection=1; mode=block\nServer=GSE\nAlt-Svc=quic=\":443\"; ma=2592000; v=\"44,43,39,35\"\nTransfer-Encoding=chunked"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"403\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1174)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:392)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:182)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [403] but found [401]",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.error.errors[0].reason",
											"insufficientPermissions"
										]
									},
									{
										"cells": [
											"$.error.errors[0].message",
											"Insufficient Permission"
										]
									},
									{
										"cells": [
											"$.error.code",
											"403"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Replace API Endpoint placeholders - Scenario 2",
					"tags": [],
					"executionTime": 742,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Purchase Validator API\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 115,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://www.googleapis.com/androidpublisher/v3/applications/com.pearsoned.smartflashcards/purchases/products/#skuid/tokens/#purchaseToken?access_token=#access_token\n\n",
									"HTTP Method is: GET\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user save the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"purchaseToken",
											"jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0"
										]
									},
									{
										"cells": [
											"Scenario",
											"accessToken",
											"ya29.GlzGBXmxF34s99wQ0o8ie7B4P85ld_FUNBZxizYB"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0\" is successfully saved as a text in Scenario Data Store [purchaseToken]",
									"\"ya29.GlzGBXmxF34s99wQ0o8ie7B4P85ld_FUNBZxizYB\" is successfully saved as a text in Scenario Data Store [accessToken]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set values to the API endpoint placeholders using data stores as follows",
							"table": {
								"headers": [
									"Placeholder In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Replacement Text"
								],
								"rows": [
									{
										"cells": [
											"#skuid",
											"n",
											"",
											"",
											"com.pearsoned.smartflashcards.expert.elementary"
										]
									},
									{
										"cells": [
											"#purchaseToken",
											"y",
											"scenario",
											"purchaseToken",
											""
										]
									},
									{
										"cells": [
											"#access_token",
											"y",
											"scenario",
											"accessToken",
											""
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 46,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [purchaseToken] is: \"jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0\"\n\n",
									"Text inside Scenario Data Store [accessToken] is: \"ya29.GlzGBXmxF34s99wQ0o8ie7B4P85ld_FUNBZxizYB\"\n\n",
									"https://www.googleapis.com/androidpublisher/v3/applications/com.pearsoned.smartflashcards/purchases/products/com.pearsoned.smartflashcards.expert.elementary/tokens/jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0?access_token=ya29.GlzGBXmxF34s99wQ0o8ie7B4P85ld_FUNBZxizYB"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 578,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://www.googleapis.com/androidpublisher/v3/applications/com.pearsoned.smartflashcards/purchases/products/com.pearsoned.smartflashcards.expert.elementary/tokens/jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0?access_token=ya29.GlzGBXmxF34s99wQ0o8ie7B4P85ld_FUNBZxizYB\n\n",
									"HTTP Method is: GET\n\n",
									"Response Time is: 372ms\n\n",
									"Response is: \n{\n    \"error\": {\n        \"errors\": [\n            {\n                \"domain\": \"global\",\n                \"reason\": \"authError\",\n                \"message\": \"Invalid Credentials\",\n                \"locationType\": \"header\",\n                \"location\": \"Authorization\"\n            }\n        ],\n        \"code\": 401,\n        \"message\": \"Invalid Credentials\"\n    }\n}\n\n",
									"Response Headers are: \nVary=Origin\nVary=X-Origin\nWWW-Authenticate=Bearer realm=\"https://accounts.google.com/\", error=invalid_token\nContent-Type=application/json; charset=UTF-8\nContent-Encoding=gzip\nDate=Wed, 21 Nov 2018 07:31:47 GMT\nExpires=Wed, 21 Nov 2018 07:31:47 GMT\nCache-Control=private, max-age=0\nX-Content-Type-Options=nosniff\nX-Frame-Options=SAMEORIGIN\nX-XSS-Protection=1; mode=block\nServer=GSE\nAlt-Svc=quic=\":443\"; ma=2592000; v=\"44,43,39,35\"\nTransfer-Encoding=chunked"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"401\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.error.errors[0].reason",
											"authError"
										]
									},
									{
										"cells": [
											"$.error.errors[0].message",
											"Invalid Credentials"
										]
									},
									{
										"cells": [
											"$.error.code",
											"401"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Validate the data store values",
					"tags": [],
					"executionTime": 1638,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 94,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"No"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"N/A"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request payload as follows \u003cfile:/resources/payloads/login.txt\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"osanda12\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1543,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1280ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2MzA5LCJpYXQiOjE1NDI3ODU1MDgsInNlc3NpZCI6IjU5MmU2ZmI1LTBiOTItNDA5My05NTBmLTg2YmNhOWI5MDcwNCJ9.J_aKs04ZWZ3Z_u2N92XrHtfB8fSNKGAyxwH_k1hXFtcdLo8hS5V1oaE21Z4NLYrOa9o5tGB0gEe3S3J8R2IgKlVvG6PtEvVmzZL7d68KxWVtBTHvuCYV5aIvXc7uGnbFaSzbl1_wIjqUq-nuLd0-gaAe7JVlR7nb8NZ4nFPo0lY\"\n}\n\n",
									"Response Headers are: \nServer=Apache-Coyote/1.1\nCorrelation-Id=55681e43-3196-47cb-a5a8-c5dc4878f86f\nLocation=https://pi-int.pearsoned.com/v1/piapi-int/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2MzA5LCJpYXQiOjE1NDI3ODU1MDgsInNlc3NpZCI6IjU5MmU2ZmI1LTBiOTItNDA5My05NTBmLTg2YmNhOWI5MDcwNCJ9.J_aKs04ZWZ3Z_u2N92XrHtfB8fSNKGAyxwH_k1hXFtcdLo8hS5V1oaE21Z4NLYrOa9o5tGB0gEe3S3J8R2IgKlVvG6PtEvVmzZL7d68KxWVtBTHvuCYV5aIvXc7uGnbFaSzbl1_wIjqUq-nuLd0-gaAe7JVlR7nb8NZ4nFPo0lY\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Wed, 21 Nov 2018 07:31:47 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"status",
											"$.status"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"success\" is successfully saved as a text in Scenario Data Store [status]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user save the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"osanda12"
										]
									},
									{
										"cells": [
											"Scenario",
											"status",
											"success"
										]
									},
									{
										"cells": [
											"Scenario",
											"mobileUserName",
											"osanda12"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"\"osanda12\" is successfully saved as a text in Scenario Data Store [username]",
									"\"success\" is successfully saved as a text in Scenario Data Store [status]",
									"\"osanda12\" is successfully saved as a text in Scenario Data Store [mobileUserName]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores equal to the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"osanda12"
										]
									},
									{
										"cells": [
											"Scenario",
											"status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside two data stores should be equal",
							"table": {
								"headers": [
									"DataStore 1 Type",
									"Variable 1 Name",
									"DataStore 2 Type",
									"Variable 2 Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"Scenario",
											"mobileUserName"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Text inside Scenario Data Store [mobileUserName] is: \"osanda12\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores not equal to the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"osanda"
										]
									},
									{
										"cells": [
											"Scenario",
											"status",
											"succes"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside two data stores should not be equal",
							"table": {
								"headers": [
									"DataStore 1 Type",
									"Variable 1 Name",
									"DataStore 2 Type",
									"Variable 2 Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"Scenario",
											"status"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores contain the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"osanda"
										]
									},
									{
										"cells": [
											"Scenario",
											"status",
											"succes"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the value inside a data store should contain the value of the other data store",
							"table": {
								"headers": [
									"DataStore 1 Type",
									"Variable 1 Name",
									"DataStore 2 Type",
									"Variable 2 Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"Scenario",
											"mobileUserName"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Text inside Scenario Data Store [mobileUserName] is: \"osanda12\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores not contain the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"deshan"
										]
									},
									{
										"cells": [
											"Scenario",
											"status",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the value inside a data store should not contain the value of the other data store",
							"table": {
								"headers": [
									"DataStore 1 Type",
									"Variable 1 Name",
									"DataStore 2 Type",
									"Variable 2 Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"Scenario",
											"status"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 8,
			"failedScenarioCount": 1,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Text Files Operations Specification",
			"fileName": "C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\specs\\Other\\01. Text files operations.spec",
			"tags": [],
			"executionTime": 8714,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Invoke PI API in Staging Environment using valid username and password using payload text file",
					"tags": [
						"get_pi_token",
						"staging"
					],
					"executionTime": 1767,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 70,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request payload as follows \u003cfile:/resources/payloads/login.txt\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"osanda12\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1690,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1507ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2MzExLCJpYXQiOjE1NDI3ODU1MTAsInNlc3NpZCI6IjY3ZGIxMmJkLTM2ZWYtNDFkZS04YTE2LWMzMjJkNGZjZDU1YiJ9.eD0ILzExCAkPY_bX6fQs_RxlFeF1Rvej5E_LZTovrWp_s2tDEXlkZL44F-16dou-NEWcru2gztRWF11YPjLfZULG1ywgihS1OkIqw7q9zEKFG1vYEBmWgkeU3bZ3L2V0fVVARJ4_Zz6KPo_BQZk0D3eLEyV0X7frqalaIjXvSq8\"\n}\n\n",
									"Response Headers are: \nServer=Apache-Coyote/1.1\nCorrelation-Id=ceb83f28-5571-4647-afc6-4708ea5901bf\nLocation=https://pi-int.pearsoned.com/v1/piapi-int/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2MzExLCJpYXQiOjE1NDI3ODU1MTAsInNlc3NpZCI6IjY3ZGIxMmJkLTM2ZWYtNDFkZS04YTE2LWMzMjJkNGZjZDU1YiJ9.eD0ILzExCAkPY_bX6fQs_RxlFeF1Rvej5E_LZTovrWp_s2tDEXlkZL44F-16dou-NEWcru2gztRWF11YPjLfZULG1ywgihS1OkIqw7q9zEKFG1vYEBmWgkeU3bZ3L2V0fVVARJ4_Zz6KPo_BQZk0D3eLEyV0X7frqalaIjXvSq8\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Wed, 21 Nov 2018 07:31:50 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Existence in the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"isExists"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"true"
										]
									},
									{
										"cells": [
											"$.osa",
											"false"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the access token in the response which is located inside the JSON Path of \"$.data\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2,
								"skippedReason": "",
								"messages": [
									"Successfully saved the access token into the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\""
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values of the response into text files",
							"table": {
								"headers": [
									"JSON Path",
									"Text File Path"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"/resources/text_files/response_data/status.txt"
										]
									},
									{
										"cells": [
											"$.data",
											"/resources/text_files/response_data/token.txt"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 5,
								"skippedReason": "",
								"messages": [
									"Successfully saved the value inside \"$.status\" into the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo/resources/text_files/response_data/status.txt\"",
									"Successfully saved the value inside \"$.data\" into the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo/resources/text_files/response_data/token.txt\""
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Get a category",
					"tags": [],
					"executionTime": 6947,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get All Categories in Deck Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 98,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/categories\n\n",
									"HTTP Method is: GET\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"No"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IlVTIiwidHlwZSI6ImF0IiwiZXhwIjoxNTQyNzk2MzExLCJpYXQiOjE1NDI3ODU1MTAsInNlc3NpZCI6IjY3ZGIxMmJkLTM2ZWYtNDFkZS04YTE2LWMzMjJkNGZjZDU1YiJ9.eD0ILzExCAkPY_bX6fQs_RxlFeF1Rvej5E_LZTovrWp_s2tDEXlkZL44F-16dou-NEWcru2gztRWF11YPjLfZULG1ywgihS1OkIqw7q9zEKFG1vYEBmWgkeU3bZ3L2V0fVVARJ4_Zz6KPo_BQZk0D3eLEyV0X7frqalaIjXvSq8"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 6849,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/categories\n\n",
									"HTTP Method is: GET\n\n",
									"Response Time is: 837ms\n\n",
									"Response is: \n[\n    {\n        \"id\": \"5b21e8e693cee27c9a02d8dc\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-14T04:02:46.568Z\",\n        \"updatedAt\": \"2018-06-14T04:02:46.568Z\"\n    },\n    {\n        \"id\": \"5b21e8e838ade7422d7c500d\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-14T04:02:48.622Z\",\n        \"updatedAt\": \"2018-06-14T04:02:48.622Z\"\n    },\n    {\n        \"id\": \"5b21e8ea93cee27c9a02d8dd\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-14T04:02:50.661Z\",\n        \"updatedAt\": \"2018-06-14T04:02:50.661Z\"\n    },\n    {\n        \"id\": \"5b21e8ec38ade7422d7c500e\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-14T04:02:52.669Z\",\n        \"updatedAt\": \"2018-06-14T04:02:52.669Z\"\n    },\n    {\n        \"id\": \"5b21e8ee93cee27c9a02d8de\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-14T04:02:54.702Z\",\n        \"updatedAt\": \"2018-06-14T04:02:54.702Z\"\n    },\n    {\n        \"id\": \"5b21e8f038ade7422d7c500f\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-14T04:02:56.714Z\",\n        \"updatedAt\": \"2018-06-14T04:02:56.714Z\"\n    },\n    {\n        \"id\": \"5b21e8f293cee27c9a02d8df\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-14T04:02:58.719Z\",\n        \"updatedAt\": \"2018-06-14T04:02:58.719Z\"\n    },\n    {\n        \"id\": \"5b21e90293cee27c9a02d8e1\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-14T04:03:14.921Z\",\n        \"updatedAt\": \"2018-06-14T04:03:16.929Z\"\n    },\n    {\n        \"id\": \"5b21e90693cee27c9a02d8e2\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-14T04:03:18.938Z\",\n        \"updatedAt\": \"2018-06-14T04:03:20.953Z\"\n    },\n    {\n        \"id\": \"5b21e90a93cee27c9a02d8e3\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-14T04:03:22.965Z\",\n        \"updatedAt\": \"2018-06-14T04:03:24.975Z\"\n    },\n    {\n        \"id\": \"5b21e90e93cee27c9a02d8e4\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-14T04:03:26.989Z\",\n        \"updatedAt\": \"2018-06-14T04:03:29.004Z\"\n    },\n    {\n        \"id\": \"5b21e91293cee27c9a02d8e5\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-14T04:03:30.995Z\",\n        \"updatedAt\": \"2018-06-14T04:03:33.006Z\"\n    },\n    {\n        \"id\": \"5b21e91793cee27c9a02d8e6\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-14T04:03:35.070Z\",\n        \"updatedAt\": \"2018-06-14T04:03:37.069Z\"\n    },\n    {\n        \"id\": \"5b21e91b93cee27c9a02d8e7\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-14T04:03:39.092Z\",\n        \"updatedAt\": \"2018-06-14T04:03:41.106Z\"\n    },\n    {\n        \"id\": \"5b21e91f93cee27c9a02d8e8\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-14T04:03:43.103Z\",\n        \"updatedAt\": \"2018-06-14T04:03:43.103Z\"\n    },\n    {\n        \"id\": \"5b21e92338ade7422d7c5010\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-14T04:03:47.443Z\",\n        \"updatedAt\": \"2018-06-14T04:03:47.443Z\"\n    },\n    {\n        \"id\": \"5b21e92b38ade7422d7c5011\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-14T04:03:55.465Z\",\n        \"updatedAt\": \"2018-06-14T04:03:55.465Z\"\n    },\n    {\n        \"id\": \"5b24d8d038ade7422d7c5042\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-16T09:30:56.888Z\",\n        \"updatedAt\": \"2018-06-16T09:30:56.888Z\"\n    },\n    {\n        \"id\": \"5b24d8d393cee27c9a02d914\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-16T09:30:59.945Z\",\n        \"updatedAt\": \"2018-06-16T09:30:59.945Z\"\n    },\n    {\n        \"id\": \"5b24d8d638ade7422d7c5043\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-16T09:31:02.917Z\",\n        \"updatedAt\": \"2018-06-16T09:31:02.917Z\"\n    },\n    {\n        \"id\": \"5b24d8da93cee27c9a02d915\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-16T09:31:06.304Z\",\n        \"updatedAt\": \"2018-06-16T09:31:06.304Z\"\n    },\n    {\n        \"id\": \"5b24d8dd38ade7422d7c5044\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-16T09:31:09.376Z\",\n        \"updatedAt\": \"2018-06-16T09:31:09.376Z\"\n    },\n    {\n        \"id\": \"5b24d8e193cee27c9a02d916\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-16T09:31:13.155Z\",\n        \"updatedAt\": \"2018-06-16T09:31:13.155Z\"\n    },\n    {\n        \"id\": \"5b24d8e438ade7422d7c5045\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-16T09:31:16.331Z\",\n        \"updatedAt\": \"2018-06-16T09:31:16.331Z\"\n    },\n    {\n        \"id\": \"5b24d8fe38ade7422d7c5047\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-16T09:31:42.034Z\",\n        \"updatedAt\": \"2018-06-16T09:31:45.214Z\"\n    },\n    {\n        \"id\": \"5b24d90438ade7422d7c5048\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-16T09:31:48.689Z\",\n        \"updatedAt\": \"2018-06-16T09:31:52.074Z\"\n    },\n    {\n        \"id\": \"5b24d90b38ade7422d7c5049\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-16T09:31:55.860Z\",\n        \"updatedAt\": \"2018-06-16T09:31:59.987Z\"\n    },\n    {\n        \"id\": \"5b24d91338ade7422d7c504a\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-16T09:32:03.329Z\",\n        \"updatedAt\": \"2018-06-16T09:32:06.709Z\"\n    },\n    {\n        \"id\": \"5b24d91a38ade7422d7c504b\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-16T09:32:10.191Z\",\n        \"updatedAt\": \"2018-06-16T09:32:13.570Z\"\n    },\n    {\n        \"id\": \"5b24d92138ade7422d7c504c\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-16T09:32:17.206Z\",\n        \"updatedAt\": \"2018-06-16T09:32:20.330Z\"\n    },\n    {\n        \"id\": \"5b24d92738ade7422d7c504d\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-16T09:32:23.816Z\",\n        \"updatedAt\": \"2018-06-16T09:32:26.985Z\"\n    },\n    {\n        \"id\": \"5b24d92e38ade7422d7c504e\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-16T09:32:30.879Z\",\n        \"updatedAt\": \"2018-06-16T09:32:30.879Z\"\n    },\n    {\n        \"id\": \"5b24d93538ade7422d7c504f\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-16T09:32:37.839Z\",\n        \"updatedAt\": \"2018-06-16T09:32:37.839Z\"\n    },\n    {\n        \"id\": \"5b24d94438ade7422d7c5050\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-16T09:32:52.176Z\",\n        \"updatedAt\": \"2018-06-16T09:32:52.176Z\"\n    },\n    {\n        \"id\": \"5b262e1938ade7422d7c50a6\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-17T09:47:05.391Z\",\n        \"updatedAt\": \"2018-06-17T09:47:05.391Z\"\n    },\n    {\n        \"id\": \"5b262e1c38ade7422d7c50a7\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-17T09:47:08.435Z\",\n        \"updatedAt\": \"2018-06-17T09:47:08.435Z\"\n    },\n    {\n        \"id\": \"5b262e1f93cee27c9a02d970\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-17T09:47:11.223Z\",\n        \"updatedAt\": \"2018-06-17T09:47:11.223Z\"\n    },\n    {\n        \"id\": \"5b262e2293cee27c9a02d971\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-17T09:47:14.026Z\",\n        \"updatedAt\": \"2018-06-17T09:47:14.026Z\"\n    },\n    {\n        \"id\": \"5b262e2438ade7422d7c50a9\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-17T09:47:16.874Z\",\n        \"updatedAt\": \"2018-06-17T09:47:16.874Z\"\n    },\n    {\n        \"id\": \"5b262e2793cee27c9a02d972\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-17T09:47:19.633Z\",\n        \"updatedAt\": \"2018-06-17T09:47:19.633Z\"\n    },\n    {\n        \"id\": \"5b262e2a93cee27c9a02d973\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-17T09:47:22.672Z\",\n        \"updatedAt\": \"2018-06-17T09:47:22.672Z\"\n    },\n    {\n        \"id\": \"5b262e3f38ade7422d7c50ac\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-17T09:47:43.945Z\",\n        \"updatedAt\": \"2018-06-17T09:47:46.504Z\"\n    },\n    {\n        \"id\": \"5b262e4538ade7422d7c50ad\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-17T09:47:49.065Z\",\n        \"updatedAt\": \"2018-06-17T09:47:51.640Z\"\n    },\n    {\n        \"id\": \"5b262e4a38ade7422d7c50ae\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-17T09:47:54.234Z\",\n        \"updatedAt\": \"2018-06-17T09:47:57.234Z\"\n    },\n    {\n        \"id\": \"5b262e4f38ade7422d7c50af\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-17T09:47:59.853Z\",\n        \"updatedAt\": \"2018-06-17T09:48:02.764Z\"\n    },\n    {\n        \"id\": \"5b262e5538ade7422d7c50b0\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-17T09:48:05.473Z\",\n        \"updatedAt\": \"2018-06-17T09:48:08.439Z\"\n    },\n    {\n        \"id\": \"5b262e5a38ade7422d7c50b1\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-17T09:48:10.923Z\",\n        \"updatedAt\": \"2018-06-17T09:48:13.557Z\"\n    },\n    {\n        \"id\": \"5b262e6038ade7422d7c50b2\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-17T09:48:16.618Z\",\n        \"updatedAt\": \"2018-06-17T09:48:19.245Z\"\n    },\n    {\n        \"id\": \"5b262e6293cee27c9a02d974\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-17T09:48:18.521Z\",\n        \"updatedAt\": \"2018-06-17T09:48:18.521Z\"\n    },\n    {\n        \"id\": \"5b262e6593cee27c9a02d975\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-17T09:48:21.126Z\",\n        \"updatedAt\": \"2018-06-17T09:48:21.126Z\"\n    },\n    {\n        \"id\": \"5b262e6538ade7422d7c50b3\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-17T09:48:21.943Z\",\n        \"updatedAt\": \"2018-06-17T09:48:21.943Z\"\n    },\n    {\n        \"id\": \"5b262e6793cee27c9a02d976\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-17T09:48:23.936Z\",\n        \"updatedAt\": \"2018-06-17T09:48:23.936Z\"\n    },\n    {\n        \"id\": \"5b262e6a93cee27c9a02d977\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-17T09:48:26.786Z\",\n        \"updatedAt\": \"2018-06-17T09:48:26.786Z\"\n    },\n    {\n        \"id\": \"5b262e6b38ade7422d7c50b4\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-17T09:48:27.178Z\",\n        \"updatedAt\": \"2018-06-17T09:48:27.178Z\"\n    },\n    {\n        \"id\": \"5b262e6d93cee27c9a02d978\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-17T09:48:29.631Z\",\n        \"updatedAt\": \"2018-06-17T09:48:29.631Z\"\n    },\n    {\n        \"id\": \"5b262e6f93cee27c9a02d979\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-17T09:48:31.976Z\",\n        \"updatedAt\": \"2018-06-17T09:48:31.976Z\"\n    },\n    {\n        \"id\": \"5b262e7293cee27c9a02d97a\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-17T09:48:34.621Z\",\n        \"updatedAt\": \"2018-06-17T09:48:34.621Z\"\n    },\n    {\n        \"id\": \"5b262e7638ade7422d7c50b5\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-17T09:48:38.005Z\",\n        \"updatedAt\": \"2018-06-17T09:48:38.005Z\"\n    },\n    {\n        \"id\": \"5b262e8738ade7422d7c50b7\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-17T09:48:55.910Z\",\n        \"updatedAt\": \"2018-06-17T09:48:58.753Z\"\n    },\n    {\n        \"id\": \"5b262e8d38ade7422d7c50b8\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-17T09:49:01.255Z\",\n        \"updatedAt\": \"2018-06-17T09:49:03.873Z\"\n    },\n    {\n        \"id\": \"5b262e9238ade7422d7c50b9\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-17T09:49:06.850Z\",\n        \"updatedAt\": \"2018-06-17T09:49:09.634Z\"\n    },\n    {\n        \"id\": \"5b262e9838ade7422d7c50ba\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-17T09:49:12.474Z\",\n        \"updatedAt\": \"2018-06-17T09:49:15.124Z\"\n    },\n    {\n        \"id\": \"5b262e9d38ade7422d7c50bb\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-17T09:49:17.830Z\",\n        \"updatedAt\": \"2018-06-17T09:49:20.898Z\"\n    },\n    {\n        \"id\": \"5b262ea338ade7422d7c50bc\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-17T09:49:23.633Z\",\n        \"updatedAt\": \"2018-06-17T09:49:26.057Z\"\n    },\n    {\n        \"id\": \"5b262ea838ade7422d7c50bd\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-17T09:49:28.905Z\",\n        \"updatedAt\": \"2018-06-17T09:49:31.657Z\"\n    },\n    {\n        \"id\": \"5b262eae38ade7422d7c50be\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-17T09:49:34.539Z\",\n        \"updatedAt\": \"2018-06-17T09:49:34.539Z\"\n    },\n    {\n        \"id\": \"5b262eb338ade7422d7c50bf\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-17T09:49:39.753Z\",\n        \"updatedAt\": \"2018-06-17T09:49:39.753Z\"\n    },\n    {\n        \"id\": \"5b262ebe38ade7422d7c50c0\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-17T09:49:50.934Z\",\n        \"updatedAt\": \"2018-06-17T09:49:50.934Z\"\n    },\n    {\n        \"id\": \"5b61c157d992ed0010343a53\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-01T14:19:03.099Z\",\n        \"updatedAt\": \"2018-08-01T14:19:03.099Z\"\n    },\n    {\n        \"id\": \"5b61c158d992ed0010343a54\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-01T14:19:04.023Z\",\n        \"updatedAt\": \"2018-08-01T14:19:04.023Z\"\n    },\n    {\n        \"id\": \"5b61c158d992ed0010343a55\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-01T14:19:04.944Z\",\n        \"updatedAt\": \"2018-08-01T14:19:04.944Z\"\n    },\n    {\n        \"id\": \"5b61c159d992ed0010343a56\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-01T14:19:05.899Z\",\n        \"updatedAt\": \"2018-08-01T14:19:05.899Z\"\n    },\n    {\n        \"id\": \"5b61c15ad992ed0010343a57\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-01T14:19:06.861Z\",\n        \"updatedAt\": \"2018-08-01T14:19:06.861Z\"\n    },\n    {\n        \"id\": \"5b61c15bd992ed0010343a58\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-01T14:19:07.784Z\",\n        \"updatedAt\": \"2018-08-01T14:19:07.784Z\"\n    },\n    {\n        \"id\": \"5b61c15cd992ed0010343a59\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-01T14:19:08.710Z\",\n        \"updatedAt\": \"2018-08-01T14:19:08.710Z\"\n    },\n    {\n        \"id\": \"5b61c164d992ed0010343a5b\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-01T14:19:16.114Z\",\n        \"updatedAt\": \"2018-08-01T14:19:17.045Z\"\n    },\n    {\n        \"id\": \"5b61c165d992ed0010343a5c\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-01T14:19:17.969Z\",\n        \"updatedAt\": \"2018-08-01T14:19:18.897Z\"\n    },\n    {\n        \"id\": \"5b61c167d992ed0010343a5d\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-01T14:19:19.869Z\",\n        \"updatedAt\": \"2018-08-01T14:19:20.792Z\"\n    },\n    {\n        \"id\": \"5b61c169d992ed0010343a5e\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-01T14:19:21.722Z\",\n        \"updatedAt\": \"2018-08-01T14:19:22.662Z\"\n    },\n    {\n        \"id\": \"5b61c16bd992ed0010343a5f\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-01T14:19:23.628Z\",\n        \"updatedAt\": \"2018-08-01T14:19:24.577Z\"\n    },\n    {\n        \"id\": \"5b61c16dd992ed0010343a60\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-01T14:19:25.512Z\",\n        \"updatedAt\": \"2018-08-01T14:19:26.474Z\"\n    },\n    {\n        \"id\": \"5b61c16fd992ed0010343a61\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-01T14:19:27.452Z\",\n        \"updatedAt\": \"2018-08-01T14:19:28.410Z\"\n    },\n    {\n        \"id\": \"5b61c171d992ed0010343a62\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-01T14:19:29.333Z\",\n        \"updatedAt\": \"2018-08-01T14:19:29.333Z\"\n    },\n    {\n        \"id\": \"5b61c173d992ed0010343a63\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-01T14:19:31.217Z\",\n        \"updatedAt\": \"2018-08-01T14:19:31.217Z\"\n    },\n    {\n        \"id\": \"5b61c176d992ed0010343a64\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-01T14:19:34.851Z\",\n        \"updatedAt\": \"2018-08-01T14:19:34.851Z\"\n    },\n    {\n        \"id\": \"5b62a913d992ed0010343d4d\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-02T06:47:47.877Z\",\n        \"updatedAt\": \"2018-08-02T06:47:47.877Z\"\n    },\n    {\n        \"id\": \"5b62a914d992ed0010343d4e\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-02T06:47:48.838Z\",\n        \"updatedAt\": \"2018-08-02T06:47:48.838Z\"\n    },\n    {\n        \"id\": \"5b62a915d992ed0010343d4f\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-02T06:47:49.791Z\",\n        \"updatedAt\": \"2018-08-02T06:47:49.791Z\"\n    },\n    {\n        \"id\": \"5b62a916d992ed0010343d50\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-02T06:47:50.734Z\",\n        \"updatedAt\": \"2018-08-02T06:47:50.734Z\"\n    },\n    {\n        \"id\": \"5b62a917d992ed0010343d51\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-02T06:47:51.676Z\",\n        \"updatedAt\": \"2018-08-02T06:47:51.676Z\"\n    },\n    {\n        \"id\": \"5b62a918d992ed0010343d52\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-02T06:47:52.664Z\",\n        \"updatedAt\": \"2018-08-02T06:47:52.664Z\"\n    },\n    {\n        \"id\": \"5b62a919d992ed0010343d53\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-02T06:47:53.608Z\",\n        \"updatedAt\": \"2018-08-02T06:47:53.608Z\"\n    },\n    {\n        \"id\": \"5b62a921d992ed0010343d55\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-02T06:48:01.203Z\",\n        \"updatedAt\": \"2018-08-02T06:48:02.155Z\"\n    },\n    {\n        \"id\": \"5b62a923d992ed0010343d56\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-02T06:48:03.106Z\",\n        \"updatedAt\": \"2018-08-02T06:48:04.056Z\"\n    },\n    {\n        \"id\": \"5b62a925d992ed0010343d57\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-02T06:48:05.005Z\",\n        \"updatedAt\": \"2018-08-02T06:48:05.959Z\"\n    },\n    {\n        \"id\": \"5b62a926d992ed0010343d58\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-02T06:48:06.985Z\",\n        \"updatedAt\": \"2018-08-02T06:48:07.965Z\"\n    },\n    {\n        \"id\": \"5b62a928d992ed0010343d59\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-02T06:48:08.918Z\",\n        \"updatedAt\": \"2018-08-02T06:48:09.902Z\"\n    },\n    {\n        \"id\": \"5b62a92ad992ed0010343d5a\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-02T06:48:10.881Z\",\n        \"updatedAt\": \"2018-08-02T06:48:11.831Z\"\n    },\n    {\n        \"id\": \"5b62a92cd992ed0010343d5b\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-02T06:48:12.783Z\",\n        \"updatedAt\": \"2018-08-02T06:48:13.731Z\"\n    },\n    {\n        \"id\": \"5b62a92ed992ed0010343d5c\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-02T06:48:14.676Z\",\n        \"updatedAt\": \"2018-08-02T06:48:14.676Z\"\n    },\n    {\n        \"id\": \"5b62a930d992ed0010343d5d\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-02T06:48:16.574Z\",\n        \"updatedAt\": \"2018-08-02T06:48:16.574Z\"\n    },\n    {\n        \"id\": \"5b62a934d992ed0010343d5e\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-02T06:48:20.544Z\",\n        \"updatedAt\": \"2018-08-02T06:48:20.544Z\"\n    },\n    {\n        \"id\": \"5b62be6ad992ed0010343f24\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-02T08:18:50.471Z\",\n        \"updatedAt\": \"2018-08-02T08:18:50.471Z\"\n    },\n    {\n        \"id\": \"5b62be6bd992ed0010343f25\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-02T08:18:51.541Z\",\n        \"updatedAt\": \"2018-08-02T08:18:51.541Z\"\n    },\n    {\n        \"id\": \"5b62be6cd992ed0010343f26\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-02T08:18:52.543Z\",\n        \"updatedAt\": \"2018-08-02T08:18:52.543Z\"\n    },\n    {\n        \"id\": \"5b62be6dd992ed0010343f27\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-02T08:18:53.550Z\",\n        \"updatedAt\": \"2018-08-02T08:18:53.550Z\"\n    },\n    {\n        \"id\": \"5b62be6ed992ed0010343f28\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-02T08:18:54.551Z\",\n        \"updatedAt\": \"2018-08-02T08:18:54.551Z\"\n    },\n    {\n        \"id\": \"5b62be6fd992ed0010343f29\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-02T08:18:55.574Z\",\n        \"updatedAt\": \"2018-08-02T08:18:55.574Z\"\n    },\n    {\n        \"id\": \"5b62be70d992ed0010343f2a\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-02T08:18:56.576Z\",\n        \"updatedAt\": \"2018-08-02T08:18:56.576Z\"\n    },\n    {\n        \"id\": \"5b62be78d992ed0010343f2c\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-02T08:19:04.750Z\",\n        \"updatedAt\": \"2018-08-02T08:19:05.831Z\"\n    },\n    {\n        \"id\": \"5b62be7ad992ed0010343f2e\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-02T08:19:06.906Z\",\n        \"updatedAt\": \"2018-08-02T08:19:07.958Z\"\n    },\n    {\n        \"id\": \"5b62be7cd992ed0010343f2f\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-02T08:19:08.961Z\",\n        \"updatedAt\": \"2018-08-02T08:19:10.079Z\"\n    },\n    {\n        \"id\": \"5b62be7fd992ed0010343f30\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-02T08:19:11.158Z\",\n        \"updatedAt\": \"2018-08-02T08:19:12.242Z\"\n    },\n    {\n        \"id\": \"5b62be81d992ed0010343f31\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-02T08:19:13.316Z\",\n        \"updatedAt\": \"2018-08-02T08:19:14.338Z\"\n    },\n    {\n        \"id\": \"5b62be83d992ed0010343f32\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-02T08:19:15.399Z\",\n        \"updatedAt\": \"2018-08-02T08:19:16.409Z\"\n    },\n    {\n        \"id\": \"5b62be85d992ed0010343f33\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-02T08:19:17.487Z\",\n        \"updatedAt\": \"2018-08-02T08:19:18.525Z\"\n    },\n    {\n        \"id\": \"5b62be87d992ed0010343f34\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-02T08:19:19.544Z\",\n        \"updatedAt\": \"2018-08-02T08:19:19.544Z\"\n    },\n    {\n        \"id\": \"5b62be89d992ed0010343f35\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-02T08:19:21.639Z\",\n        \"updatedAt\": \"2018-08-02T08:19:21.639Z\"\n    },\n    {\n        \"id\": \"5b62be8dd992ed0010343f36\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-02T08:19:25.503Z\",\n        \"updatedAt\": \"2018-08-02T08:19:25.503Z\"\n    },\n    {\n        \"id\": \"5b6304bcd992ed00103443c7\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-02T13:18:52.854Z\",\n        \"updatedAt\": \"2018-08-02T13:18:52.854Z\"\n    },\n    {\n        \"id\": \"5b6304bdd992ed00103443c8\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-02T13:18:53.847Z\",\n        \"updatedAt\": \"2018-08-02T13:18:53.847Z\"\n    },\n    {\n        \"id\": \"5b6304bed992ed00103443c9\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-02T13:18:54.803Z\",\n        \"updatedAt\": \"2018-08-02T13:18:54.803Z\"\n    },\n    {\n        \"id\": \"5b6304bfd992ed00103443ca\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-02T13:18:55.749Z\",\n        \"updatedAt\": \"2018-08-02T13:18:55.749Z\"\n    },\n    {\n        \"id\": \"5b6304c0d992ed00103443cb\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-02T13:18:56.693Z\",\n        \"updatedAt\": \"2018-08-02T13:18:56.693Z\"\n    },\n    {\n        \"id\": \"5b6304c1d992ed00103443cc\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-02T13:18:57.641Z\",\n        \"updatedAt\": \"2018-08-02T13:18:57.641Z\"\n    },\n    {\n        \"id\": \"5b6304c2d992ed00103443cd\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-02T13:18:58.590Z\",\n        \"updatedAt\": \"2018-08-02T13:18:58.590Z\"\n    },\n    {\n        \"id\": \"5b6304cad992ed00103443cf\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-02T13:19:06.071Z\",\n        \"updatedAt\": \"2018-08-02T13:19:07.017Z\"\n    },\n    {\n        \"id\": \"5b6304cbd992ed00103443d0\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-02T13:19:07.961Z\",\n        \"updatedAt\": \"2018-08-02T13:19:08.909Z\"\n    },\n    {\n        \"id\": \"5b6304d0d992ed00103443d1\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-02T13:19:12.853Z\",\n        \"updatedAt\": \"2018-08-02T13:19:13.795Z\"\n    },\n    {\n        \"id\": \"5b6304d2d992ed00103443d2\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-02T13:19:14.737Z\",\n        \"updatedAt\": \"2018-08-02T13:19:15.685Z\"\n    },\n    {\n        \"id\": \"5b6304d4d992ed00103443d3\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-02T13:19:16.636Z\",\n        \"updatedAt\": \"2018-08-02T13:19:17.577Z\"\n    },\n    {\n        \"id\": \"5b6304d6d992ed00103443d4\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-02T13:19:18.520Z\",\n        \"updatedAt\": \"2018-08-02T13:19:19.462Z\"\n    },\n    {\n        \"id\": \"5b6304d8d992ed00103443d5\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-02T13:19:20.410Z\",\n        \"updatedAt\": \"2018-08-02T13:19:21.359Z\"\n    },\n    {\n        \"id\": \"5b6304dad992ed00103443d6\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-02T13:19:22.307Z\",\n        \"updatedAt\": \"2018-08-02T13:19:22.307Z\"\n    },\n    {\n        \"id\": \"5b6304dcd992ed00103443d7\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-02T13:19:24.669Z\",\n        \"updatedAt\": \"2018-08-02T13:19:24.669Z\"\n    },\n    {\n        \"id\": \"5b6304e0d992ed00103443d8\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-02T13:19:28.379Z\",\n        \"updatedAt\": \"2018-08-02T13:19:28.379Z\"\n    },\n    {\n        \"id\": \"5b63f954d992ed001034448c\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-03T06:42:28.762Z\",\n        \"updatedAt\": \"2018-08-03T06:42:28.762Z\"\n    },\n    {\n        \"id\": \"5b63f955d992ed001034448d\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-03T06:42:29.667Z\",\n        \"updatedAt\": \"2018-08-03T06:42:29.667Z\"\n    },\n    {\n        \"id\": \"5b63f956d992ed001034448e\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-03T06:42:30.575Z\",\n        \"updatedAt\": \"2018-08-03T06:42:30.575Z\"\n    },\n    {\n        \"id\": \"5b63f957d992ed001034448f\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-03T06:42:31.480Z\",\n        \"updatedAt\": \"2018-08-03T06:42:31.480Z\"\n    },\n    {\n        \"id\": \"5b63f958d992ed0010344490\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-03T06:42:32.395Z\",\n        \"updatedAt\": \"2018-08-03T06:42:32.395Z\"\n    },\n    {\n        \"id\": \"5b63f959d992ed0010344491\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-03T06:42:33.312Z\",\n        \"updatedAt\": \"2018-08-03T06:42:33.312Z\"\n    },\n    {\n        \"id\": \"5b63f95ad992ed0010344492\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-03T06:42:34.213Z\",\n        \"updatedAt\": \"2018-08-03T06:42:34.213Z\"\n    },\n    {\n        \"id\": \"5b63f961d992ed0010344494\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-03T06:42:41.390Z\",\n        \"updatedAt\": \"2018-08-03T06:42:42.300Z\"\n    },\n    {\n        \"id\": \"5b63f963d992ed0010344495\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-03T06:42:43.202Z\",\n        \"updatedAt\": \"2018-08-03T06:42:44.103Z\"\n    },\n    {\n        \"id\": \"5b63f965d992ed0010344496\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-03T06:42:45.011Z\",\n        \"updatedAt\": \"2018-08-03T06:42:45.920Z\"\n    },\n    {\n        \"id\": \"5b63f966d992ed0010344497\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-03T06:42:46.820Z\",\n        \"updatedAt\": \"2018-08-03T06:42:47.726Z\"\n    },\n    {\n        \"id\": \"5b63f968d992ed0010344498\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-03T06:42:48.635Z\",\n        \"updatedAt\": \"2018-08-03T06:42:49.538Z\"\n    },\n    {\n        \"id\": \"5b63f96ad992ed0010344499\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-03T06:42:50.448Z\",\n        \"updatedAt\": \"2018-08-03T06:42:51.351Z\"\n    },\n    {\n        \"id\": \"5b63f96cd992ed001034449a\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-03T06:42:52.270Z\",\n        \"updatedAt\": \"2018-08-03T06:42:53.173Z\"\n    },\n    {\n        \"id\": \"5b63f96ed992ed001034449b\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T06:42:54.078Z\",\n        \"updatedAt\": \"2018-08-03T06:42:54.078Z\"\n    },\n    {\n        \"id\": \"5b63f96fd992ed001034449c\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T06:42:55.887Z\",\n        \"updatedAt\": \"2018-08-03T06:42:55.887Z\"\n    },\n    {\n        \"id\": \"5b63f973d992ed001034449d\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T06:42:59.397Z\",\n        \"updatedAt\": \"2018-08-03T06:42:59.397Z\"\n    },\n    {\n        \"id\": \"5b6414c8d992ed0010344574\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-03T08:39:36.408Z\",\n        \"updatedAt\": \"2018-08-03T08:39:36.408Z\"\n    },\n    {\n        \"id\": \"5b6414c9d992ed0010344575\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-03T08:39:37.872Z\",\n        \"updatedAt\": \"2018-08-03T08:39:37.872Z\"\n    },\n    {\n        \"id\": \"5b6414cbd992ed0010344576\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-03T08:39:39.371Z\",\n        \"updatedAt\": \"2018-08-03T08:39:39.371Z\"\n    },\n    {\n        \"id\": \"5b6414cdd992ed0010344577\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-03T08:39:41.241Z\",\n        \"updatedAt\": \"2018-08-03T08:39:41.241Z\"\n    },\n    {\n        \"id\": \"5b6414cfd992ed0010344578\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-03T08:39:43.040Z\",\n        \"updatedAt\": \"2018-08-03T08:39:43.040Z\"\n    },\n    {\n        \"id\": \"5b6414d0d992ed0010344579\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-03T08:39:44.291Z\",\n        \"updatedAt\": \"2018-08-03T08:39:44.291Z\"\n    },\n    {\n        \"id\": \"5b6414d2d992ed001034457a\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-03T08:39:46.022Z\",\n        \"updatedAt\": \"2018-08-03T08:39:46.022Z\"\n    },\n    {\n        \"id\": \"5b6414dcd992ed001034457c\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-03T08:39:56.937Z\",\n        \"updatedAt\": \"2018-08-03T08:39:57.991Z\"\n    },\n    {\n        \"id\": \"5b6414dfd992ed001034457d\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-03T08:39:59.758Z\",\n        \"updatedAt\": \"2018-08-03T08:40:00.836Z\"\n    },\n    {\n        \"id\": \"5b6414e2d992ed001034457e\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-03T08:40:02.258Z\",\n        \"updatedAt\": \"2018-08-03T08:40:03.806Z\"\n    },\n    {\n        \"id\": \"5b6414e5d992ed001034457f\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-03T08:40:05.122Z\",\n        \"updatedAt\": \"2018-08-03T08:40:06.981Z\"\n    },\n    {\n        \"id\": \"5b6414e8d992ed0010344580\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-03T08:40:08.742Z\",\n        \"updatedAt\": \"2018-08-03T08:40:10.308Z\"\n    },\n    {\n        \"id\": \"5b6414ebd992ed0010344581\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-03T08:40:11.417Z\",\n        \"updatedAt\": \"2018-08-03T08:40:13.242Z\"\n    },\n    {\n        \"id\": \"5b6414eed992ed0010344582\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-03T08:40:14.654Z\",\n        \"updatedAt\": \"2018-08-03T08:40:16.186Z\"\n    },\n    {\n        \"id\": \"5b6414f1d992ed0010344583\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T08:40:17.478Z\",\n        \"updatedAt\": \"2018-08-03T08:40:17.478Z\"\n    },\n    {\n        \"id\": \"5b6414f4d992ed0010344584\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T08:40:20.836Z\",\n        \"updatedAt\": \"2018-08-03T08:40:20.836Z\"\n    },\n    {\n        \"id\": \"5b6414fbd992ed0010344585\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T08:40:27.003Z\",\n        \"updatedAt\": \"2018-08-03T08:40:27.003Z\"\n    },\n    {\n        \"id\": \"5b643512d992ed0010344676\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T10:57:22.325Z\",\n        \"updatedAt\": \"2018-08-03T10:57:22.325Z\"\n    },\n    {\n        \"id\": \"5b6436b3d992ed00103446be\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T11:04:19.496Z\",\n        \"updatedAt\": \"2018-08-03T11:04:19.496Z\"\n    },\n    {\n        \"id\": \"5b64388dd992ed00103446fa\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T11:12:13.265Z\",\n        \"updatedAt\": \"2018-08-03T11:12:13.265Z\"\n    },\n    {\n        \"id\": \"5b643940d992ed0010344708\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-03T11:15:12.181Z\",\n        \"updatedAt\": \"2018-08-03T11:15:12.181Z\"\n    },\n    {\n        \"id\": \"5b643941d992ed0010344709\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-03T11:15:13.650Z\",\n        \"updatedAt\": \"2018-08-03T11:15:13.650Z\"\n    },\n    {\n        \"id\": \"5b643943d992ed001034470a\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-03T11:15:15.421Z\",\n        \"updatedAt\": \"2018-08-03T11:15:15.421Z\"\n    },\n    {\n        \"id\": \"5b643944d992ed001034470b\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-03T11:15:16.994Z\",\n        \"updatedAt\": \"2018-08-03T11:15:16.994Z\"\n    },\n    {\n        \"id\": \"5b643946d992ed001034470c\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-03T11:15:18.767Z\",\n        \"updatedAt\": \"2018-08-03T11:15:18.767Z\"\n    },\n    {\n        \"id\": \"5b643948d992ed001034470d\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-03T11:15:20.228Z\",\n        \"updatedAt\": \"2018-08-03T11:15:20.228Z\"\n    },\n    {\n        \"id\": \"5b643949d992ed001034470e\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-03T11:15:21.802Z\",\n        \"updatedAt\": \"2018-08-03T11:15:21.802Z\"\n    },\n    {\n        \"id\": \"5b64398ed992ed001034471e\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-03T11:16:30.419Z\",\n        \"updatedAt\": \"2018-08-03T11:16:31.986Z\"\n    },\n    {\n        \"id\": \"5b643991d992ed001034471f\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-03T11:16:33.967Z\",\n        \"updatedAt\": \"2018-08-03T11:16:35.996Z\"\n    },\n    {\n        \"id\": \"5b643995d992ed0010344720\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-03T11:16:37.517Z\",\n        \"updatedAt\": \"2018-08-03T11:16:38.982Z\"\n    },\n    {\n        \"id\": \"5b643998d992ed0010344721\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-03T11:16:40.859Z\",\n        \"updatedAt\": \"2018-08-03T11:16:42.319Z\"\n    },\n    {\n        \"id\": \"5b64399cd992ed0010344722\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-03T11:16:44.203Z\",\n        \"updatedAt\": \"2018-08-03T11:16:45.669Z\"\n    },\n    {\n        \"id\": \"5b64399fd992ed0010344723\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-03T11:16:47.802Z\",\n        \"updatedAt\": \"2018-08-03T11:16:49.218Z\"\n    },\n    {\n        \"id\": \"5b6439a2d992ed0010344724\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-03T11:16:50.990Z\",\n        \"updatedAt\": \"2018-08-03T11:16:52.770Z\"\n    },\n    {\n        \"id\": \"5b643fe9d992ed00103447d8\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-03T11:43:37.595Z\",\n        \"updatedAt\": \"2018-08-03T11:43:37.595Z\"\n    },\n    {\n        \"id\": \"5b643fead992ed00103447d9\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-03T11:43:38.558Z\",\n        \"updatedAt\": \"2018-08-03T11:43:38.558Z\"\n    },\n    {\n        \"id\": \"5b643febd992ed00103447da\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-03T11:43:39.521Z\",\n        \"updatedAt\": \"2018-08-03T11:43:39.521Z\"\n    },\n    {\n        \"id\": \"5b643fecd992ed00103447db\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-03T11:43:40.461Z\",\n        \"updatedAt\": \"2018-08-03T11:43:40.461Z\"\n    },\n    {\n        \"id\": \"5b643fedd992ed00103447dc\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-03T11:43:41.434Z\",\n        \"updatedAt\": \"2018-08-03T11:43:41.434Z\"\n    },\n    {\n        \"id\": \"5b643feed992ed00103447dd\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-03T11:43:42.372Z\",\n        \"updatedAt\": \"2018-08-03T11:43:42.372Z\"\n    },\n    {\n        \"id\": \"5b643fefd992ed00103447de\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-03T11:43:43.311Z\",\n        \"updatedAt\": \"2018-08-03T11:43:43.311Z\"\n    },\n    {\n        \"id\": \"5b643ff7d992ed00103447e0\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-03T11:43:51.329Z\",\n        \"updatedAt\": \"2018-08-03T11:43:52.300Z\"\n    },\n    {\n        \"id\": \"5b643ff9d992ed00103447e1\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-03T11:43:53.313Z\",\n        \"updatedAt\": \"2018-08-03T11:43:54.295Z\"\n    },\n    {\n        \"id\": \"5b643ffbd992ed00103447e2\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-03T11:43:55.288Z\",\n        \"updatedAt\": \"2018-08-03T11:43:56.247Z\"\n    },\n    {\n        \"id\": \"5b643ffdd992ed00103447e3\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-03T11:43:57.207Z\",\n        \"updatedAt\": \"2018-08-03T11:43:58.191Z\"\n    },\n    {\n        \"id\": \"5b643fffd992ed00103447e4\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-03T11:43:59.136Z\",\n        \"updatedAt\": \"2018-08-03T11:44:00.104Z\"\n    },\n    {\n        \"id\": \"5b644001d992ed00103447e5\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-03T11:44:01.084Z\",\n        \"updatedAt\": \"2018-08-03T11:44:02.025Z\"\n    },\n    {\n        \"id\": \"5b644002d992ed00103447e6\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-03T11:44:02.984Z\",\n        \"updatedAt\": \"2018-08-03T11:44:03.952Z\"\n    },\n    {\n        \"id\": \"5b644004d992ed00103447e7\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T11:44:04.919Z\",\n        \"updatedAt\": \"2018-08-03T11:44:04.919Z\"\n    },\n    {\n        \"id\": \"5b644006d992ed00103447e8\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T11:44:06.851Z\",\n        \"updatedAt\": \"2018-08-03T11:44:06.851Z\"\n    },\n    {\n        \"id\": \"5b64400ad992ed00103447e9\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T11:44:10.831Z\",\n        \"updatedAt\": \"2018-08-03T11:44:10.831Z\"\n    },\n    {\n        \"id\": \"5b67edf1d992ed0010344912\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-06T06:42:57.168Z\",\n        \"updatedAt\": \"2018-08-06T06:42:57.168Z\"\n    },\n    {\n        \"id\": \"5b67edf2d992ed0010344913\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-06T06:42:58.108Z\",\n        \"updatedAt\": \"2018-08-06T06:42:58.108Z\"\n    },\n    {\n        \"id\": \"5b67edf3d992ed0010344914\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-06T06:42:59.034Z\",\n        \"updatedAt\": \"2018-08-06T06:42:59.034Z\"\n    },\n    {\n        \"id\": \"5b67edf3d992ed0010344915\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-06T06:42:59.959Z\",\n        \"updatedAt\": \"2018-08-06T06:42:59.959Z\"\n    },\n    {\n        \"id\": \"5b67edf4d992ed0010344916\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-06T06:43:00.881Z\",\n        \"updatedAt\": \"2018-08-06T06:43:00.881Z\"\n    },\n    {\n        \"id\": \"5b67edf5d992ed0010344917\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-06T06:43:01.798Z\",\n        \"updatedAt\": \"2018-08-06T06:43:01.798Z\"\n    },\n    {\n        \"id\": \"5b67edf6d992ed0010344918\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-06T06:43:02.717Z\",\n        \"updatedAt\": \"2018-08-06T06:43:02.717Z\"\n    },\n    {\n        \"id\": \"5b67edfed992ed001034491a\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-06T06:43:10.075Z\",\n        \"updatedAt\": \"2018-08-06T06:43:10.994Z\"\n    },\n    {\n        \"id\": \"5b67edffd992ed001034491b\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-06T06:43:11.913Z\",\n        \"updatedAt\": \"2018-08-06T06:43:12.832Z\"\n    },\n    {\n        \"id\": \"5b67ee01d992ed001034491c\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-06T06:43:13.747Z\",\n        \"updatedAt\": \"2018-08-06T06:43:14.672Z\"\n    },\n    {\n        \"id\": \"5b67ee03d992ed001034491d\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-06T06:43:15.618Z\",\n        \"updatedAt\": \"2018-08-06T06:43:16.537Z\"\n    },\n    {\n        \"id\": \"5b67ee05d992ed001034491e\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-06T06:43:17.452Z\",\n        \"updatedAt\": \"2018-08-06T06:43:18.371Z\"\n    },\n    {\n        \"id\": \"5b67ee07d992ed001034491f\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-06T06:43:19.302Z\",\n        \"updatedAt\": \"2018-08-06T06:43:20.235Z\"\n    },\n    {\n        \"id\": \"5b67ee09d992ed0010344920\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-06T06:43:21.155Z\",\n        \"updatedAt\": \"2018-08-06T06:43:22.075Z\"\n    },\n    {\n        \"id\": \"5b67ee0ad992ed0010344921\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-06T06:43:22.995Z\",\n        \"updatedAt\": \"2018-08-06T06:43:22.995Z\"\n    },\n    {\n        \"id\": \"5b67ee0cd992ed0010344922\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-06T06:43:24.832Z\",\n        \"updatedAt\": \"2018-08-06T06:43:24.832Z\"\n    },\n    {\n        \"id\": \"5b67ee10d992ed0010344923\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-06T06:43:28.681Z\",\n        \"updatedAt\": \"2018-08-06T06:43:28.681Z\"\n    },\n    {\n        \"id\": \"5b9a8fa474a4d10010890327\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-13T16:26:12.242Z\",\n        \"updatedAt\": \"2018-09-13T16:26:12.242Z\"\n    },\n    {\n        \"id\": \"5b9a8fdf74a4d10010890328\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-13T16:27:11.023Z\",\n        \"updatedAt\": \"2018-09-13T16:27:11.023Z\"\n    },\n    {\n        \"id\": \"5bb5a4b205baaa001076cfb5\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-04T05:27:14.577Z\",\n        \"updatedAt\": \"2018-10-04T05:27:14.577Z\"\n    },\n    {\n        \"id\": \"5bb5a4cc05baaa001076cfb7\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-10-04T05:27:40.733Z\",\n        \"updatedAt\": \"2018-10-04T05:27:40.733Z\"\n    },\n    {\n        \"id\": \"5bb5a4cd05baaa001076cfb8\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-10-04T05:27:41.928Z\",\n        \"updatedAt\": \"2018-10-04T05:27:41.928Z\"\n    },\n    {\n        \"id\": \"5bb5a4cf05baaa001076cfb9\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-10-04T05:27:43.169Z\",\n        \"updatedAt\": \"2018-10-04T05:27:43.169Z\"\n    },\n    {\n        \"id\": \"5bb5a4d005baaa001076cfba\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-10-04T05:27:44.219Z\",\n        \"updatedAt\": \"2018-10-04T05:27:44.219Z\"\n    },\n    {\n        \"id\": \"5bb5a4d105baaa001076cfbb\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-10-04T05:27:45.298Z\",\n        \"updatedAt\": \"2018-10-04T05:27:45.298Z\"\n    },\n    {\n        \"id\": \"5bb5a4d205baaa001076cfbc\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-10-04T05:27:46.331Z\",\n        \"updatedAt\": \"2018-10-04T05:27:46.331Z\"\n    },\n    {\n        \"id\": \"5bb5a4d305baaa001076cfbd\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-10-04T05:27:47.363Z\",\n        \"updatedAt\": \"2018-10-04T05:27:47.363Z\"\n    },\n    {\n        \"id\": \"5bb5a4d405baaa001076cfbe\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-10-04T05:27:48.385Z\",\n        \"updatedAt\": \"2018-10-04T05:27:49.419Z\"\n    },\n    {\n        \"id\": \"5bb5a4d605baaa001076cfbf\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-10-04T05:27:50.443Z\",\n        \"updatedAt\": \"2018-10-04T05:27:51.469Z\"\n    },\n    {\n        \"id\": \"5bb5a4d805baaa001076cfc0\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-10-04T05:27:52.521Z\",\n        \"updatedAt\": \"2018-10-04T05:27:53.552Z\"\n    },\n    {\n        \"id\": \"5bb5a4da05baaa001076cfc1\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-10-04T05:27:54.571Z\",\n        \"updatedAt\": \"2018-10-04T05:27:55.661Z\"\n    },\n    {\n        \"id\": \"5bb5a4dc05baaa001076cfc2\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-10-04T05:27:56.703Z\",\n        \"updatedAt\": \"2018-10-04T05:27:57.705Z\"\n    },\n    {\n        \"id\": \"5bb5a4de05baaa001076cfc3\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-10-04T05:27:58.779Z\",\n        \"updatedAt\": \"2018-10-04T05:27:59.795Z\"\n    },\n    {\n        \"id\": \"5bb5a4e005baaa001076cfc4\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-10-04T05:28:00.835Z\",\n        \"updatedAt\": \"2018-10-04T05:28:01.824Z\"\n    },\n    {\n        \"id\": \"5bb5a4ff05baaa001076cfcc\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-04T05:28:31.071Z\",\n        \"updatedAt\": \"2018-10-04T05:28:31.071Z\"\n    },\n    {\n        \"id\": \"5bb5a50205baaa001076cfcd\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-04T05:28:34.988Z\",\n        \"updatedAt\": \"2018-10-04T05:28:34.988Z\"\n    },\n    {\n        \"id\": \"5bd959c405baaa001076d335\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-31T07:29:08.386Z\",\n        \"updatedAt\": \"2018-10-31T07:29:08.386Z\"\n    },\n    {\n        \"id\": \"5bd95bac05baaa001076d336\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-31T07:37:16.606Z\",\n        \"updatedAt\": \"2018-10-31T07:37:16.606Z\"\n    },\n    {\n        \"id\": \"5bd9747905baaa001076d424\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-31T09:23:05.213Z\",\n        \"updatedAt\": \"2018-10-31T09:23:05.213Z\"\n    },\n    {\n        \"id\": \"5bd9747a05baaa001076d425\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-31T09:23:06.752Z\",\n        \"updatedAt\": \"2018-10-31T09:23:06.752Z\"\n    },\n    {\n        \"id\": \"5bd9747d05baaa001076d426\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-31T09:23:09.768Z\",\n        \"updatedAt\": \"2018-10-31T09:23:09.768Z\"\n    },\n    {\n        \"id\": \"5bda904305baaa001076d85c\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-01T05:33:55.918Z\",\n        \"updatedAt\": \"2018-11-01T05:33:55.918Z\"\n    },\n    {\n        \"id\": \"5bda904505baaa001076d85d\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-01T05:33:57.004Z\",\n        \"updatedAt\": \"2018-11-01T05:33:57.004Z\"\n    },\n    {\n        \"id\": \"5bda904605baaa001076d85e\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-01T05:33:58.144Z\",\n        \"updatedAt\": \"2018-11-01T05:33:58.144Z\"\n    },\n    {\n        \"id\": \"5bda904705baaa001076d85f\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-01T05:33:59.139Z\",\n        \"updatedAt\": \"2018-11-01T05:33:59.139Z\"\n    },\n    {\n        \"id\": \"5bda904805baaa001076d860\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-01T05:34:00.132Z\",\n        \"updatedAt\": \"2018-11-01T05:34:00.132Z\"\n    },\n    {\n        \"id\": \"5bda904905baaa001076d861\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-01T05:34:01.120Z\",\n        \"updatedAt\": \"2018-11-01T05:34:01.120Z\"\n    },\n    {\n        \"id\": \"5bda904a05baaa001076d862\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-01T05:34:02.078Z\",\n        \"updatedAt\": \"2018-11-01T05:34:02.078Z\"\n    },\n    {\n        \"id\": \"5bda905205baaa001076d864\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-01T05:34:10.184Z\",\n        \"updatedAt\": \"2018-11-01T05:34:11.317Z\"\n    },\n    {\n        \"id\": \"5bda905405baaa001076d865\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-01T05:34:12.271Z\",\n        \"updatedAt\": \"2018-11-01T05:34:13.134Z\"\n    },\n    {\n        \"id\": \"5bda905605baaa001076d866\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-01T05:34:14.096Z\",\n        \"updatedAt\": \"2018-11-01T05:34:15.144Z\"\n    },\n    {\n        \"id\": \"5bda905805baaa001076d867\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-01T05:34:16.071Z\",\n        \"updatedAt\": \"2018-11-01T05:34:17.145Z\"\n    },\n    {\n        \"id\": \"5bda905a05baaa001076d868\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-01T05:34:18.360Z\",\n        \"updatedAt\": \"2018-11-01T05:34:19.316Z\"\n    },\n    {\n        \"id\": \"5bda905c05baaa001076d869\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-01T05:34:20.231Z\",\n        \"updatedAt\": \"2018-11-01T05:34:21.198Z\"\n    },\n    {\n        \"id\": \"5bda905e05baaa001076d86a\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-01T05:34:22.173Z\",\n        \"updatedAt\": \"2018-11-01T05:34:23.286Z\"\n    },\n    {\n        \"id\": \"5bda906005baaa001076d86b\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-01T05:34:24.364Z\",\n        \"updatedAt\": \"2018-11-01T05:34:24.364Z\"\n    },\n    {\n        \"id\": \"5bda906205baaa001076d86c\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-01T05:34:26.506Z\",\n        \"updatedAt\": \"2018-11-01T05:34:26.506Z\"\n    },\n    {\n        \"id\": \"5bda906605baaa001076d86d\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-01T05:34:30.456Z\",\n        \"updatedAt\": \"2018-11-01T05:34:30.456Z\"\n    },\n    {\n        \"id\": \"5be908d305baaa001076e88b\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-12T05:00:03.595Z\",\n        \"updatedAt\": \"2018-11-12T05:00:03.595Z\"\n    },\n    {\n        \"id\": \"5be908d505baaa001076e88c\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-12T05:00:05.023Z\",\n        \"updatedAt\": \"2018-11-12T05:00:05.023Z\"\n    },\n    {\n        \"id\": \"5be908d705baaa001076e88d\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-12T05:00:07.657Z\",\n        \"updatedAt\": \"2018-11-12T05:00:07.657Z\"\n    },\n    {\n        \"id\": \"5be93afa05baaa001076ebf5\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-12T08:34:02.641Z\",\n        \"updatedAt\": \"2018-11-12T08:34:02.641Z\"\n    },\n    {\n        \"id\": \"5be93afb05baaa001076ebf6\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-12T08:34:03.979Z\",\n        \"updatedAt\": \"2018-11-12T08:34:03.979Z\"\n    },\n    {\n        \"id\": \"5be93afe05baaa001076ebf7\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-12T08:34:06.941Z\",\n        \"updatedAt\": \"2018-11-12T08:34:06.941Z\"\n    },\n    {\n        \"id\": \"5bea760d05baaa001076ed7c\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T06:58:21.267Z\",\n        \"updatedAt\": \"2018-11-13T06:58:21.267Z\"\n    },\n    {\n        \"id\": \"5bea760e05baaa001076ed7d\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T06:58:22.778Z\",\n        \"updatedAt\": \"2018-11-13T06:58:22.778Z\"\n    },\n    {\n        \"id\": \"5bea761105baaa001076ed7e\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T06:58:25.696Z\",\n        \"updatedAt\": \"2018-11-13T06:58:25.696Z\"\n    },\n    {\n        \"id\": \"5bea797505baaa001076ed82\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T07:12:53.337Z\",\n        \"updatedAt\": \"2018-11-13T07:12:53.337Z\"\n    },\n    {\n        \"id\": \"5bea798705baaa001076ed83\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T07:13:11.090Z\",\n        \"updatedAt\": \"2018-11-13T07:13:11.090Z\"\n    },\n    {\n        \"id\": \"5bea799d05baaa001076ed84\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T07:13:33.340Z\",\n        \"updatedAt\": \"2018-11-13T07:13:33.340Z\"\n    },\n    {\n        \"id\": \"5bea79ad05baaa001076ed85\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-13T07:13:49.337Z\",\n        \"updatedAt\": \"2018-11-13T07:13:50.621Z\"\n    },\n    {\n        \"id\": \"5bea79af05baaa001076ed86\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-13T07:13:51.547Z\",\n        \"updatedAt\": \"2018-11-13T07:13:52.585Z\"\n    },\n    {\n        \"id\": \"5bea79b105baaa001076ed87\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-13T07:13:53.558Z\",\n        \"updatedAt\": \"2018-11-13T07:13:54.401Z\"\n    },\n    {\n        \"id\": \"5bea79b305baaa001076ed88\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-13T07:13:55.243Z\",\n        \"updatedAt\": \"2018-11-13T07:13:56.112Z\"\n    },\n    {\n        \"id\": \"5bea79b405baaa001076ed89\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-13T07:13:56.940Z\",\n        \"updatedAt\": \"2018-11-13T07:13:57.768Z\"\n    },\n    {\n        \"id\": \"5bea79b605baaa001076ed8a\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-13T07:13:58.615Z\",\n        \"updatedAt\": \"2018-11-13T07:13:59.436Z\"\n    },\n    {\n        \"id\": \"5bea79b805baaa001076ed8b\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-13T07:14:00.282Z\",\n        \"updatedAt\": \"2018-11-13T07:14:02.054Z\"\n    },\n    {\n        \"id\": \"5bea803e05baaa001076ed97\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-13T07:41:50.800Z\",\n        \"updatedAt\": \"2018-11-13T07:41:52.162Z\"\n    },\n    {\n        \"id\": \"5bea804105baaa001076ed98\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-13T07:41:53.227Z\",\n        \"updatedAt\": \"2018-11-13T07:41:54.360Z\"\n    },\n    {\n        \"id\": \"5bea804305baaa001076ed99\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-13T07:41:55.606Z\",\n        \"updatedAt\": \"2018-11-13T07:41:56.648Z\"\n    },\n    {\n        \"id\": \"5bea804505baaa001076ed9a\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-13T07:41:57.554Z\",\n        \"updatedAt\": \"2018-11-13T07:41:58.736Z\"\n    },\n    {\n        \"id\": \"5bea804705baaa001076ed9b\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-13T07:41:59.573Z\",\n        \"updatedAt\": \"2018-11-13T07:42:00.407Z\"\n    },\n    {\n        \"id\": \"5bea804905baaa001076ed9c\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-13T07:42:01.351Z\",\n        \"updatedAt\": \"2018-11-13T07:42:02.284Z\"\n    },\n    {\n        \"id\": \"5bea804b05baaa001076ed9d\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-13T07:42:03.331Z\",\n        \"updatedAt\": \"2018-11-13T07:42:04.188Z\"\n    },\n    {\n        \"id\": \"5bea86aa05baaa001076ee8f\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-13T08:09:14.316Z\",\n        \"updatedAt\": \"2018-11-13T08:09:14.316Z\"\n    },\n    {\n        \"id\": \"5bea86ab05baaa001076ee90\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-13T08:09:15.132Z\",\n        \"updatedAt\": \"2018-11-13T08:09:15.132Z\"\n    },\n    {\n        \"id\": \"5bea86ad05baaa001076ee91\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-13T08:09:17.011Z\",\n        \"updatedAt\": \"2018-11-13T08:09:17.011Z\"\n    },\n    {\n        \"id\": \"5bea86ad05baaa001076ee92\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-13T08:09:17.830Z\",\n        \"updatedAt\": \"2018-11-13T08:09:17.830Z\"\n    },\n    {\n        \"id\": \"5bea86ae05baaa001076ee93\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-13T08:09:18.616Z\",\n        \"updatedAt\": \"2018-11-13T08:09:18.616Z\"\n    },\n    {\n        \"id\": \"5bea86af05baaa001076ee94\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-13T08:09:19.403Z\",\n        \"updatedAt\": \"2018-11-13T08:09:19.403Z\"\n    },\n    {\n        \"id\": \"5bea86b005baaa001076ee95\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-13T08:09:20.213Z\",\n        \"updatedAt\": \"2018-11-13T08:09:20.213Z\"\n    },\n    {\n        \"id\": \"5bea86b605baaa001076ee97\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-13T08:09:26.491Z\",\n        \"updatedAt\": \"2018-11-13T08:09:27.356Z\"\n    },\n    {\n        \"id\": \"5bea86b805baaa001076ee98\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-13T08:09:28.186Z\",\n        \"updatedAt\": \"2018-11-13T08:09:29.023Z\"\n    },\n    {\n        \"id\": \"5bea86b905baaa001076ee99\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-13T08:09:29.858Z\",\n        \"updatedAt\": \"2018-11-13T08:09:30.642Z\"\n    },\n    {\n        \"id\": \"5bea86bb05baaa001076ee9a\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-13T08:09:31.529Z\",\n        \"updatedAt\": \"2018-11-13T08:09:32.368Z\"\n    },\n    {\n        \"id\": \"5bea86bd05baaa001076ee9b\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-13T08:09:33.200Z\",\n        \"updatedAt\": \"2018-11-13T08:09:34.036Z\"\n    },\n    {\n        \"id\": \"5bea86be05baaa001076ee9c\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-13T08:09:34.870Z\",\n        \"updatedAt\": \"2018-11-13T08:09:35.666Z\"\n    },\n    {\n        \"id\": \"5bea86c005baaa001076ee9d\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-13T08:09:36.541Z\",\n        \"updatedAt\": \"2018-11-13T08:09:37.378Z\"\n    },\n    {\n        \"id\": \"5bea86c205baaa001076ee9e\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T08:09:38.212Z\",\n        \"updatedAt\": \"2018-11-13T08:09:38.212Z\"\n    },\n    {\n        \"id\": \"5bea86c405baaa001076ee9f\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T08:09:40.095Z\",\n        \"updatedAt\": \"2018-11-13T08:09:40.095Z\"\n    },\n    {\n        \"id\": \"5bea86c705baaa001076eea0\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T08:09:43.183Z\",\n        \"updatedAt\": \"2018-11-13T08:09:43.183Z\"\n    },\n    {\n        \"id\": \"5bea988d05baaa001076ef7d\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-13T09:25:33.498Z\",\n        \"updatedAt\": \"2018-11-13T09:25:33.498Z\"\n    },\n    {\n        \"id\": \"5bea988e05baaa001076ef7e\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-13T09:25:34.299Z\",\n        \"updatedAt\": \"2018-11-13T09:25:34.299Z\"\n    },\n    {\n        \"id\": \"5bea988f05baaa001076ef7f\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-13T09:25:35.187Z\",\n        \"updatedAt\": \"2018-11-13T09:25:35.187Z\"\n    },\n    {\n        \"id\": \"5bea988f05baaa001076ef80\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-13T09:25:35.970Z\",\n        \"updatedAt\": \"2018-11-13T09:25:35.970Z\"\n    },\n    {\n        \"id\": \"5bea989005baaa001076ef81\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-13T09:25:36.753Z\",\n        \"updatedAt\": \"2018-11-13T09:25:36.753Z\"\n    },\n    {\n        \"id\": \"5bea989105baaa001076ef82\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-13T09:25:37.533Z\",\n        \"updatedAt\": \"2018-11-13T09:25:37.533Z\"\n    },\n    {\n        \"id\": \"5bea989205baaa001076ef83\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-13T09:25:38.317Z\",\n        \"updatedAt\": \"2018-11-13T09:25:38.317Z\"\n    },\n    {\n        \"id\": \"5bea989905baaa001076ef85\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-13T09:25:45.525Z\",\n        \"updatedAt\": \"2018-11-13T09:25:46.363Z\"\n    },\n    {\n        \"id\": \"5bea989b05baaa001076ef86\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-13T09:25:47.141Z\",\n        \"updatedAt\": \"2018-11-13T09:25:47.941Z\"\n    },\n    {\n        \"id\": \"5bea989c05baaa001076ef87\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-13T09:25:48.767Z\",\n        \"updatedAt\": \"2018-11-13T09:25:49.602Z\"\n    },\n    {\n        \"id\": \"5bea989e05baaa001076ef88\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-13T09:25:50.391Z\",\n        \"updatedAt\": \"2018-11-13T09:25:51.169Z\"\n    },\n    {\n        \"id\": \"5bea98a005baaa001076ef89\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-13T09:25:52.010Z\",\n        \"updatedAt\": \"2018-11-13T09:25:52.806Z\"\n    },\n    {\n        \"id\": \"5bea98a105baaa001076ef8a\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-13T09:25:53.679Z\",\n        \"updatedAt\": \"2018-11-13T09:25:54.558Z\"\n    },\n    {\n        \"id\": \"5bea98a405baaa001076ef8b\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-13T09:25:56.184Z\",\n        \"updatedAt\": \"2018-11-13T09:25:56.975Z\"\n    },\n    {\n        \"id\": \"5bea98a605baaa001076ef8c\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T09:25:58.601Z\",\n        \"updatedAt\": \"2018-11-13T09:25:58.601Z\"\n    },\n    {\n        \"id\": \"5bea98a905baaa001076ef8d\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T09:26:01.054Z\",\n        \"updatedAt\": \"2018-11-13T09:26:01.054Z\"\n    },\n    {\n        \"id\": \"5bea98ac05baaa001076ef8e\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T09:26:04.214Z\",\n        \"updatedAt\": \"2018-11-13T09:26:04.214Z\"\n    },\n    {\n        \"id\": \"5bea9d9c05baaa001076ef91\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-13T09:47:08.043Z\",\n        \"updatedAt\": \"2018-11-13T09:47:08.043Z\"\n    },\n    {\n        \"id\": \"5bea9d9c05baaa001076ef92\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-13T09:47:08.990Z\",\n        \"updatedAt\": \"2018-11-13T09:47:08.990Z\"\n    },\n    {\n        \"id\": \"5bea9d9d05baaa001076ef93\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-13T09:47:09.819Z\",\n        \"updatedAt\": \"2018-11-13T09:47:09.819Z\"\n    },\n    {\n        \"id\": \"5bea9d9e05baaa001076ef94\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-13T09:47:10.656Z\",\n        \"updatedAt\": \"2018-11-13T09:47:10.656Z\"\n    },\n    {\n        \"id\": \"5bea9d9f05baaa001076ef95\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-13T09:47:11.580Z\",\n        \"updatedAt\": \"2018-11-13T09:47:11.580Z\"\n    },\n    {\n        \"id\": \"5bea9da005baaa001076ef96\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-13T09:47:12.534Z\",\n        \"updatedAt\": \"2018-11-13T09:47:12.534Z\"\n    },\n    {\n        \"id\": \"5bea9da105baaa001076ef97\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-13T09:47:13.476Z\",\n        \"updatedAt\": \"2018-11-13T09:47:13.476Z\"\n    },\n    {\n        \"id\": \"5bea9da805baaa001076ef99\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-13T09:47:20.264Z\",\n        \"updatedAt\": \"2018-11-13T09:47:21.099Z\"\n    },\n    {\n        \"id\": \"5bea9da905baaa001076ef9a\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-13T09:47:21.936Z\",\n        \"updatedAt\": \"2018-11-13T09:47:23.812Z\"\n    },\n    {\n        \"id\": \"5bea9dac05baaa001076ef9b\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-13T09:47:24.765Z\",\n        \"updatedAt\": \"2018-11-13T09:47:25.727Z\"\n    },\n    {\n        \"id\": \"5bea9dae05baaa001076ef9c\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-13T09:47:26.635Z\",\n        \"updatedAt\": \"2018-11-13T09:47:27.469Z\"\n    },\n    {\n        \"id\": \"5bea9db005baaa001076ef9d\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-13T09:47:28.308Z\",\n        \"updatedAt\": \"2018-11-13T09:47:29.089Z\"\n    },\n    {\n        \"id\": \"5bea9db105baaa001076ef9e\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-13T09:47:29.847Z\",\n        \"updatedAt\": \"2018-11-13T09:47:30.647Z\"\n    },\n    {\n        \"id\": \"5bea9db305baaa001076ef9f\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-13T09:47:31.437Z\",\n        \"updatedAt\": \"2018-11-13T09:47:32.275Z\"\n    },\n    {\n        \"id\": \"5bea9db505baaa001076efa0\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T09:47:33.032Z\",\n        \"updatedAt\": \"2018-11-13T09:47:33.032Z\"\n    },\n    {\n        \"id\": \"5bea9db605baaa001076efa1\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T09:47:34.676Z\",\n        \"updatedAt\": \"2018-11-13T09:47:34.676Z\"\n    },\n    {\n        \"id\": \"5bea9db905baaa001076efa2\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T09:47:37.839Z\",\n        \"updatedAt\": \"2018-11-13T09:47:37.839Z\"\n    },\n    {\n        \"id\": \"5bea9f4a05baaa001076efa4\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-13T09:54:18.268Z\",\n        \"updatedAt\": \"2018-11-13T09:54:18.268Z\"\n    },\n    {\n        \"id\": \"5bea9f4b05baaa001076efa5\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-13T09:54:19.238Z\",\n        \"updatedAt\": \"2018-11-13T09:54:19.238Z\"\n    },\n    {\n        \"id\": \"5bea9f4c05baaa001076efa6\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-13T09:54:20.129Z\",\n        \"updatedAt\": \"2018-11-13T09:54:20.129Z\"\n    },\n    {\n        \"id\": \"5bea9f4d05baaa001076efa7\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-13T09:54:21.087Z\",\n        \"updatedAt\": \"2018-11-13T09:54:21.087Z\"\n    },\n    {\n        \"id\": \"5bea9f4d05baaa001076efa8\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-13T09:54:21.921Z\",\n        \"updatedAt\": \"2018-11-13T09:54:21.921Z\"\n    },\n    {\n        \"id\": \"5bea9f4e05baaa001076efa9\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-13T09:54:22.776Z\",\n        \"updatedAt\": \"2018-11-13T09:54:22.776Z\"\n    },\n    {\n        \"id\": \"5bea9f4f05baaa001076efaa\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-13T09:54:23.696Z\",\n        \"updatedAt\": \"2018-11-13T09:54:23.696Z\"\n    },\n    {\n        \"id\": \"5bea9f5605baaa001076efac\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-13T09:54:30.599Z\",\n        \"updatedAt\": \"2018-11-13T09:54:31.462Z\"\n    },\n    {\n        \"id\": \"5bea9f5805baaa001076efad\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-13T09:54:32.262Z\",\n        \"updatedAt\": \"2018-11-13T09:54:33.073Z\"\n    },\n    {\n        \"id\": \"5bea9f5905baaa001076efae\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-13T09:54:33.928Z\",\n        \"updatedAt\": \"2018-11-13T09:54:36.382Z\"\n    },\n    {\n        \"id\": \"5bea9f5d05baaa001076efaf\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-13T09:54:37.173Z\",\n        \"updatedAt\": \"2018-11-13T09:54:37.985Z\"\n    },\n    {\n        \"id\": \"5bea9f5e05baaa001076efb0\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-13T09:54:38.809Z\",\n        \"updatedAt\": \"2018-11-13T09:54:39.760Z\"\n    },\n    {\n        \"id\": \"5bea9f6005baaa001076efb1\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-13T09:54:40.579Z\",\n        \"updatedAt\": \"2018-11-13T09:54:41.806Z\"\n    },\n    {\n        \"id\": \"5bea9f6205baaa001076efb2\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-13T09:54:42.602Z\",\n        \"updatedAt\": \"2018-11-13T09:54:43.544Z\"\n    },\n    {\n        \"id\": \"5bea9f6405baaa001076efb3\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T09:54:44.483Z\",\n        \"updatedAt\": \"2018-11-13T09:54:44.483Z\"\n    },\n    {\n        \"id\": \"5bea9f6605baaa001076efb4\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T09:54:46.154Z\",\n        \"updatedAt\": \"2018-11-13T09:54:46.154Z\"\n    },\n    {\n        \"id\": \"5bea9f6905baaa001076efb5\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T09:54:49.391Z\",\n        \"updatedAt\": \"2018-11-13T09:54:49.391Z\"\n    },\n    {\n        \"id\": \"5beaa48905baaa001076f093\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-13T10:16:41.813Z\",\n        \"updatedAt\": \"2018-11-13T10:16:41.813Z\"\n    },\n    {\n        \"id\": \"5beaa48a05baaa001076f094\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-13T10:16:42.643Z\",\n        \"updatedAt\": \"2018-11-13T10:16:42.643Z\"\n    },\n    {\n        \"id\": \"5beaa48b05baaa001076f095\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-13T10:16:43.450Z\",\n        \"updatedAt\": \"2018-11-13T10:16:43.450Z\"\n    },\n    {\n        \"id\": \"5beaa48c05baaa001076f096\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-13T10:16:44.268Z\",\n        \"updatedAt\": \"2018-11-13T10:16:44.268Z\"\n    },\n    {\n        \"id\": \"5beaa48d05baaa001076f097\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-13T10:16:45.011Z\",\n        \"updatedAt\": \"2018-11-13T10:16:45.011Z\"\n    },\n    {\n        \"id\": \"5beaa48d05baaa001076f098\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-13T10:16:45.767Z\",\n        \"updatedAt\": \"2018-11-13T10:16:45.767Z\"\n    },\n    {\n        \"id\": \"5beaa48e05baaa001076f099\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-13T10:16:46.568Z\",\n        \"updatedAt\": \"2018-11-13T10:16:46.568Z\"\n    },\n    {\n        \"id\": \"5beaa49405baaa001076f09b\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-13T10:16:52.533Z\",\n        \"updatedAt\": \"2018-11-13T10:16:53.354Z\"\n    },\n    {\n        \"id\": \"5beaa49605baaa001076f09c\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-13T10:16:54.189Z\",\n        \"updatedAt\": \"2018-11-13T10:16:54.930Z\"\n    },\n    {\n        \"id\": \"5beaa49705baaa001076f09d\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-13T10:16:55.755Z\",\n        \"updatedAt\": \"2018-11-13T10:16:56.594Z\"\n    },\n    {\n        \"id\": \"5beaa49905baaa001076f09e\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-13T10:16:57.426Z\",\n        \"updatedAt\": \"2018-11-13T10:16:58.503Z\"\n    },\n    {\n        \"id\": \"5beaa49b05baaa001076f09f\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-13T10:16:59.307Z\",\n        \"updatedAt\": \"2018-11-13T10:17:00.148Z\"\n    },\n    {\n        \"id\": \"5beaa49c05baaa001076f0a0\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-13T10:17:00.914Z\",\n        \"updatedAt\": \"2018-11-13T10:17:01.709Z\"\n    },\n    {\n        \"id\": \"5beaa49e05baaa001076f0a1\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-13T10:17:02.545Z\",\n        \"updatedAt\": \"2018-11-13T10:17:03.326Z\"\n    },\n    {\n        \"id\": \"5beaa4a005baaa001076f0a2\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T10:17:04.101Z\",\n        \"updatedAt\": \"2018-11-13T10:17:04.101Z\"\n    },\n    {\n        \"id\": \"5beaa4a105baaa001076f0a3\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T10:17:05.621Z\",\n        \"updatedAt\": \"2018-11-13T10:17:05.621Z\"\n    },\n    {\n        \"id\": \"5beaa4a405baaa001076f0a4\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T10:17:08.846Z\",\n        \"updatedAt\": \"2018-11-13T10:17:08.846Z\"\n    },\n    {\n        \"id\": \"5beb05e005baaa001076f19b\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-13T17:12:00.359Z\",\n        \"updatedAt\": \"2018-11-13T17:12:00.359Z\"\n    },\n    {\n        \"id\": \"5beb05e105baaa001076f19c\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-13T17:12:01.242Z\",\n        \"updatedAt\": \"2018-11-13T17:12:01.242Z\"\n    },\n    {\n        \"id\": \"5beb05e205baaa001076f19d\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-13T17:12:02.139Z\",\n        \"updatedAt\": \"2018-11-13T17:12:02.139Z\"\n    },\n    {\n        \"id\": \"5beb05e305baaa001076f19e\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-13T17:12:03.013Z\",\n        \"updatedAt\": \"2018-11-13T17:12:03.013Z\"\n    },\n    {\n        \"id\": \"5beb05e305baaa001076f19f\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-13T17:12:03.880Z\",\n        \"updatedAt\": \"2018-11-13T17:12:03.880Z\"\n    },\n    {\n        \"id\": \"5beb05e405baaa001076f1a0\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-13T17:12:04.759Z\",\n        \"updatedAt\": \"2018-11-13T17:12:04.759Z\"\n    },\n    {\n        \"id\": \"5beb05e505baaa001076f1a1\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-13T17:12:05.678Z\",\n        \"updatedAt\": \"2018-11-13T17:12:05.678Z\"\n    },\n    {\n        \"id\": \"5beb05ec05baaa001076f1a3\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-13T17:12:12.903Z\",\n        \"updatedAt\": \"2018-11-13T17:12:13.822Z\"\n    },\n    {\n        \"id\": \"5beb05ee05baaa001076f1a4\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-13T17:12:14.740Z\",\n        \"updatedAt\": \"2018-11-13T17:12:15.611Z\"\n    },\n    {\n        \"id\": \"5beb05f005baaa001076f1a5\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-13T17:12:16.489Z\",\n        \"updatedAt\": \"2018-11-13T17:12:17.417Z\"\n    },\n    {\n        \"id\": \"5beb05f205baaa001076f1a6\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-13T17:12:18.318Z\",\n        \"updatedAt\": \"2018-11-13T17:12:19.260Z\"\n    },\n    {\n        \"id\": \"5beb05f405baaa001076f1a7\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-13T17:12:20.172Z\",\n        \"updatedAt\": \"2018-11-13T17:12:21.093Z\"\n    },\n    {\n        \"id\": \"5beb05f505baaa001076f1a8\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-13T17:12:21.972Z\",\n        \"updatedAt\": \"2018-11-13T17:12:22.844Z\"\n    },\n    {\n        \"id\": \"5beb05f705baaa001076f1a9\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-13T17:12:23.729Z\",\n        \"updatedAt\": \"2018-11-13T17:12:24.590Z\"\n    },\n    {\n        \"id\": \"5beb05f905baaa001076f1aa\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T17:12:25.500Z\",\n        \"updatedAt\": \"2018-11-13T17:12:25.500Z\"\n    },\n    {\n        \"id\": \"5beb05fb05baaa001076f1ab\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T17:12:27.344Z\",\n        \"updatedAt\": \"2018-11-13T17:12:27.344Z\"\n    },\n    {\n        \"id\": \"5beb05fe05baaa001076f1ac\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-13T17:12:30.911Z\",\n        \"updatedAt\": \"2018-11-13T17:12:30.911Z\"\n    },\n    {\n        \"id\": \"5bebd29505baaa001076f2a2\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-14T07:45:25.217Z\",\n        \"updatedAt\": \"2018-11-14T07:45:25.217Z\"\n    },\n    {\n        \"id\": \"5bebd29505baaa001076f2a3\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-14T07:45:25.990Z\",\n        \"updatedAt\": \"2018-11-14T07:45:25.990Z\"\n    },\n    {\n        \"id\": \"5bebd29605baaa001076f2a4\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-14T07:45:26.765Z\",\n        \"updatedAt\": \"2018-11-14T07:45:26.765Z\"\n    },\n    {\n        \"id\": \"5bebd29705baaa001076f2a5\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-14T07:45:27.547Z\",\n        \"updatedAt\": \"2018-11-14T07:45:27.547Z\"\n    },\n    {\n        \"id\": \"5bebd29805baaa001076f2a6\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-14T07:45:28.375Z\",\n        \"updatedAt\": \"2018-11-14T07:45:28.375Z\"\n    },\n    {\n        \"id\": \"5bebd29905baaa001076f2a7\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-14T07:45:29.153Z\",\n        \"updatedAt\": \"2018-11-14T07:45:29.153Z\"\n    },\n    {\n        \"id\": \"5bebd29905baaa001076f2a8\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-14T07:45:29.922Z\",\n        \"updatedAt\": \"2018-11-14T07:45:29.922Z\"\n    },\n    {\n        \"id\": \"5bebd2a105baaa001076f2aa\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-14T07:45:37.039Z\",\n        \"updatedAt\": \"2018-11-14T07:45:37.816Z\"\n    },\n    {\n        \"id\": \"5bebd2a205baaa001076f2ab\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-14T07:45:38.582Z\",\n        \"updatedAt\": \"2018-11-14T07:45:39.621Z\"\n    },\n    {\n        \"id\": \"5bebd2a405baaa001076f2ac\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-14T07:45:40.394Z\",\n        \"updatedAt\": \"2018-11-14T07:45:41.166Z\"\n    },\n    {\n        \"id\": \"5bebd2a605baaa001076f2ad\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-14T07:45:42.223Z\",\n        \"updatedAt\": \"2018-11-14T07:45:42.995Z\"\n    },\n    {\n        \"id\": \"5bebd2a705baaa001076f2ae\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-14T07:45:43.767Z\",\n        \"updatedAt\": \"2018-11-14T07:45:44.538Z\"\n    },\n    {\n        \"id\": \"5bebd2a905baaa001076f2af\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-14T07:45:45.330Z\",\n        \"updatedAt\": \"2018-11-14T07:45:46.099Z\"\n    },\n    {\n        \"id\": \"5bebd2aa05baaa001076f2b0\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-14T07:45:46.867Z\",\n        \"updatedAt\": \"2018-11-14T07:45:47.638Z\"\n    },\n    {\n        \"id\": \"5bebd2ac05baaa001076f2b1\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-14T07:45:48.412Z\",\n        \"updatedAt\": \"2018-11-14T07:45:48.412Z\"\n    },\n    {\n        \"id\": \"5bebd2ad05baaa001076f2b2\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-14T07:45:49.993Z\",\n        \"updatedAt\": \"2018-11-14T07:45:49.993Z\"\n    },\n    {\n        \"id\": \"5bebd2b105baaa001076f2b3\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-14T07:45:53.069Z\",\n        \"updatedAt\": \"2018-11-14T07:45:53.069Z\"\n    },\n    {\n        \"id\": \"5bebe16505baaa001076f3c6\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-14T08:48:37.083Z\",\n        \"updatedAt\": \"2018-11-14T08:48:37.083Z\"\n    },\n    {\n        \"id\": \"5bebe16505baaa001076f3c7\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-14T08:48:37.853Z\",\n        \"updatedAt\": \"2018-11-14T08:48:37.853Z\"\n    },\n    {\n        \"id\": \"5bebe16605baaa001076f3c8\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-14T08:48:38.649Z\",\n        \"updatedAt\": \"2018-11-14T08:48:38.649Z\"\n    },\n    {\n        \"id\": \"5bebe16705baaa001076f3c9\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-14T08:48:39.465Z\",\n        \"updatedAt\": \"2018-11-14T08:48:39.465Z\"\n    },\n    {\n        \"id\": \"5bebe16805baaa001076f3ca\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-14T08:48:40.234Z\",\n        \"updatedAt\": \"2018-11-14T08:48:40.234Z\"\n    },\n    {\n        \"id\": \"5bebe16905baaa001076f3cb\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-14T08:48:41.029Z\",\n        \"updatedAt\": \"2018-11-14T08:48:41.029Z\"\n    },\n    {\n        \"id\": \"5bebe16905baaa001076f3cc\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-14T08:48:41.820Z\",\n        \"updatedAt\": \"2018-11-14T08:48:41.820Z\"\n    },\n    {\n        \"id\": \"5bebe17005baaa001076f3ce\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-14T08:48:48.121Z\",\n        \"updatedAt\": \"2018-11-14T08:48:48.919Z\"\n    },\n    {\n        \"id\": \"5bebe17105baaa001076f3cf\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-14T08:48:49.695Z\",\n        \"updatedAt\": \"2018-11-14T08:48:50.470Z\"\n    },\n    {\n        \"id\": \"5bebe17305baaa001076f3d0\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-14T08:48:51.270Z\",\n        \"updatedAt\": \"2018-11-14T08:48:52.057Z\"\n    },\n    {\n        \"id\": \"5bebe17405baaa001076f3d1\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-14T08:48:52.824Z\",\n        \"updatedAt\": \"2018-11-14T08:48:53.606Z\"\n    },\n    {\n        \"id\": \"5bebe17605baaa001076f3d2\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-14T08:48:54.396Z\",\n        \"updatedAt\": \"2018-11-14T08:48:55.167Z\"\n    },\n    {\n        \"id\": \"5bebe17705baaa001076f3d3\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-14T08:48:55.957Z\",\n        \"updatedAt\": \"2018-11-14T08:48:56.746Z\"\n    },\n    {\n        \"id\": \"5bebe17a05baaa001076f3d4\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-14T08:48:58.632Z\",\n        \"updatedAt\": \"2018-11-14T08:48:59.410Z\"\n    },\n    {\n        \"id\": \"5bebe17c05baaa001076f3d5\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-14T08:49:00.198Z\",\n        \"updatedAt\": \"2018-11-14T08:49:00.198Z\"\n    },\n    {\n        \"id\": \"5bebe17d05baaa001076f3d6\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-14T08:49:01.763Z\",\n        \"updatedAt\": \"2018-11-14T08:49:01.763Z\"\n    },\n    {\n        \"id\": \"5bebe18005baaa001076f3d7\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-14T08:49:04.819Z\",\n        \"updatedAt\": \"2018-11-14T08:49:04.819Z\"\n    },\n    {\n        \"id\": \"5bebea43c67fa30010b28e11\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-14T09:26:27.533Z\",\n        \"updatedAt\": \"2018-11-14T09:26:27.533Z\"\n    },\n    {\n        \"id\": \"5bebea44c67fa30010b28e12\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-14T09:26:28.431Z\",\n        \"updatedAt\": \"2018-11-14T09:26:28.431Z\"\n    },\n    {\n        \"id\": \"5bebea45c67fa30010b28e13\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-14T09:26:29.221Z\",\n        \"updatedAt\": \"2018-11-14T09:26:29.221Z\"\n    },\n    {\n        \"id\": \"5bebea46c67fa30010b28e14\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-14T09:26:30.005Z\",\n        \"updatedAt\": \"2018-11-14T09:26:30.005Z\"\n    },\n    {\n        \"id\": \"5bebea46c67fa30010b28e15\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-14T09:26:30.806Z\",\n        \"updatedAt\": \"2018-11-14T09:26:30.806Z\"\n    },\n    {\n        \"id\": \"5bebea47c67fa30010b28e16\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-14T09:26:31.611Z\",\n        \"updatedAt\": \"2018-11-14T09:26:31.611Z\"\n    },\n    {\n        \"id\": \"5bebea48c67fa30010b28e17\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-14T09:26:32.404Z\",\n        \"updatedAt\": \"2018-11-14T09:26:32.404Z\"\n    },\n    {\n        \"id\": \"5bebea4ec67fa30010b28e19\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-14T09:26:38.716Z\",\n        \"updatedAt\": \"2018-11-14T09:26:39.516Z\"\n    },\n    {\n        \"id\": \"5bebea50c67fa30010b28e1a\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-14T09:26:40.321Z\",\n        \"updatedAt\": \"2018-11-14T09:26:41.113Z\"\n    },\n    {\n        \"id\": \"5bebea51c67fa30010b28e1b\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-14T09:26:41.913Z\",\n        \"updatedAt\": \"2018-11-14T09:26:42.700Z\"\n    },\n    {\n        \"id\": \"5bebea53c67fa30010b28e1c\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-14T09:26:43.530Z\",\n        \"updatedAt\": \"2018-11-14T09:26:44.337Z\"\n    },\n    {\n        \"id\": \"5bebea55c67fa30010b28e1d\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-14T09:26:45.128Z\",\n        \"updatedAt\": \"2018-11-14T09:26:45.937Z\"\n    },\n    {\n        \"id\": \"5bebea56c67fa30010b28e1e\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-14T09:26:46.803Z\",\n        \"updatedAt\": \"2018-11-14T09:26:47.592Z\"\n    },\n    {\n        \"id\": \"5bebea58c67fa30010b28e1f\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-14T09:26:48.388Z\",\n        \"updatedAt\": \"2018-11-14T09:26:49.176Z\"\n    },\n    {\n        \"id\": \"5bebea59c67fa30010b28e20\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-14T09:26:49.956Z\",\n        \"updatedAt\": \"2018-11-14T09:26:49.956Z\"\n    },\n    {\n        \"id\": \"5bebea5bc67fa30010b28e21\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-14T09:26:51.541Z\",\n        \"updatedAt\": \"2018-11-14T09:26:51.541Z\"\n    },\n    {\n        \"id\": \"5bebea5ec67fa30010b28e22\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-14T09:26:54.708Z\",\n        \"updatedAt\": \"2018-11-14T09:26:54.708Z\"\n    },\n    {\n        \"id\": \"5bec01134c978f0010107dc5\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-14T11:03:47.362Z\",\n        \"updatedAt\": \"2018-11-14T11:03:47.362Z\"\n    },\n    {\n        \"id\": \"5bec01144c978f0010107dc6\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-14T11:03:48.063Z\",\n        \"updatedAt\": \"2018-11-14T11:03:48.063Z\"\n    },\n    {\n        \"id\": \"5bec01144c978f0010107dc7\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-14T11:03:48.723Z\",\n        \"updatedAt\": \"2018-11-14T11:03:48.723Z\"\n    },\n    {\n        \"id\": \"5bec01154c978f0010107dc8\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-14T11:03:49.389Z\",\n        \"updatedAt\": \"2018-11-14T11:03:49.389Z\"\n    },\n    {\n        \"id\": \"5bec01164c978f0010107dc9\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-14T11:03:50.060Z\",\n        \"updatedAt\": \"2018-11-14T11:03:50.060Z\"\n    },\n    {\n        \"id\": \"5bec01164c978f0010107dca\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-14T11:03:50.724Z\",\n        \"updatedAt\": \"2018-11-14T11:03:50.724Z\"\n    },\n    {\n        \"id\": \"5bec01174c978f0010107dcb\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-14T11:03:51.401Z\",\n        \"updatedAt\": \"2018-11-14T11:03:51.401Z\"\n    },\n    {\n        \"id\": \"5bec011c4c978f0010107dcd\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-14T11:03:56.814Z\",\n        \"updatedAt\": \"2018-11-14T11:03:57.450Z\"\n    },\n    {\n        \"id\": \"5bec011e4c978f0010107dce\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-14T11:03:58.102Z\",\n        \"updatedAt\": \"2018-11-14T11:03:58.769Z\"\n    },\n    {\n        \"id\": \"5bec011f4c978f0010107dcf\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-14T11:03:59.430Z\",\n        \"updatedAt\": \"2018-11-14T11:04:00.098Z\"\n    },\n    {\n        \"id\": \"5bec01204c978f0010107dd0\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-14T11:04:00.776Z\",\n        \"updatedAt\": \"2018-11-14T11:04:01.462Z\"\n    },\n    {\n        \"id\": \"5bec01224c978f0010107dd1\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-14T11:04:02.111Z\",\n        \"updatedAt\": \"2018-11-14T11:04:02.767Z\"\n    },\n    {\n        \"id\": \"5bec01234c978f0010107dd2\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-14T11:04:03.429Z\",\n        \"updatedAt\": \"2018-11-14T11:04:04.089Z\"\n    },\n    {\n        \"id\": \"5bec01244c978f0010107dd3\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-14T11:04:04.756Z\",\n        \"updatedAt\": \"2018-11-14T11:04:05.424Z\"\n    },\n    {\n        \"id\": \"5bec01264c978f0010107dd4\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-14T11:04:06.107Z\",\n        \"updatedAt\": \"2018-11-14T11:04:06.107Z\"\n    },\n    {\n        \"id\": \"5bec01274c978f0010107dd5\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-14T11:04:07.421Z\",\n        \"updatedAt\": \"2018-11-14T11:04:07.421Z\"\n    },\n    {\n        \"id\": \"5bec012a4c978f0010107dd6\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-14T11:04:10.013Z\",\n        \"updatedAt\": \"2018-11-14T11:04:10.013Z\"\n    },\n    {\n        \"id\": \"5bed16864c978f001010825f\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-15T06:47:34.690Z\",\n        \"updatedAt\": \"2018-11-15T06:47:34.690Z\"\n    },\n    {\n        \"id\": \"5bed16874c978f0010108260\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-15T06:47:35.548Z\",\n        \"updatedAt\": \"2018-11-15T06:47:35.548Z\"\n    },\n    {\n        \"id\": \"5bed16884c978f0010108261\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-15T06:47:36.306Z\",\n        \"updatedAt\": \"2018-11-15T06:47:36.306Z\"\n    },\n    {\n        \"id\": \"5bed16894c978f0010108262\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-15T06:47:37.063Z\",\n        \"updatedAt\": \"2018-11-15T06:47:37.063Z\"\n    },\n    {\n        \"id\": \"5bed16894c978f0010108263\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-15T06:47:37.840Z\",\n        \"updatedAt\": \"2018-11-15T06:47:37.840Z\"\n    },\n    {\n        \"id\": \"5bed168a4c978f0010108264\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-15T06:47:38.625Z\",\n        \"updatedAt\": \"2018-11-15T06:47:38.625Z\"\n    },\n    {\n        \"id\": \"5bed168b4c978f0010108265\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-15T06:47:39.387Z\",\n        \"updatedAt\": \"2018-11-15T06:47:39.387Z\"\n    },\n    {\n        \"id\": \"5bed16914c978f0010108267\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-15T06:47:45.383Z\",\n        \"updatedAt\": \"2018-11-15T06:47:46.143Z\"\n    },\n    {\n        \"id\": \"5bed16924c978f0010108268\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-15T06:47:46.943Z\",\n        \"updatedAt\": \"2018-11-15T06:47:47.703Z\"\n    },\n    {\n        \"id\": \"5bed16944c978f0010108269\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-15T06:47:48.458Z\",\n        \"updatedAt\": \"2018-11-15T06:47:49.219Z\"\n    },\n    {\n        \"id\": \"5bed16954c978f001010826a\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-15T06:47:49.975Z\",\n        \"updatedAt\": \"2018-11-15T06:47:50.804Z\"\n    },\n    {\n        \"id\": \"5bed16974c978f001010826b\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-15T06:47:51.664Z\",\n        \"updatedAt\": \"2018-11-15T06:47:52.472Z\"\n    },\n    {\n        \"id\": \"5bed16994c978f001010826c\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-15T06:47:53.246Z\",\n        \"updatedAt\": \"2018-11-15T06:47:54.031Z\"\n    },\n    {\n        \"id\": \"5bed169a4c978f001010826d\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-15T06:47:54.795Z\",\n        \"updatedAt\": \"2018-11-15T06:47:55.627Z\"\n    },\n    {\n        \"id\": \"5bed169c4c978f001010826e\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-15T06:47:56.411Z\",\n        \"updatedAt\": \"2018-11-15T06:47:56.411Z\"\n    },\n    {\n        \"id\": \"5bed169e4c978f001010826f\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-15T06:47:58.324Z\",\n        \"updatedAt\": \"2018-11-15T06:47:58.324Z\"\n    },\n    {\n        \"id\": \"5bed16a14c978f0010108270\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-15T06:48:01.369Z\",\n        \"updatedAt\": \"2018-11-15T06:48:01.369Z\"\n    },\n    {\n        \"id\": \"5bed20624c978f0010108362\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-15T07:29:38.865Z\",\n        \"updatedAt\": \"2018-11-15T07:29:38.865Z\"\n    },\n    {\n        \"id\": \"5bed20634c978f0010108363\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-15T07:29:39.631Z\",\n        \"updatedAt\": \"2018-11-15T07:29:39.631Z\"\n    },\n    {\n        \"id\": \"5bed20644c978f0010108364\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-15T07:29:40.404Z\",\n        \"updatedAt\": \"2018-11-15T07:29:40.404Z\"\n    },\n    {\n        \"id\": \"5bed20654c978f0010108365\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-15T07:29:41.160Z\",\n        \"updatedAt\": \"2018-11-15T07:29:41.160Z\"\n    },\n    {\n        \"id\": \"5bed20654c978f0010108366\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-15T07:29:41.936Z\",\n        \"updatedAt\": \"2018-11-15T07:29:41.936Z\"\n    },\n    {\n        \"id\": \"5bed20664c978f0010108367\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-15T07:29:42.779Z\",\n        \"updatedAt\": \"2018-11-15T07:29:42.779Z\"\n    },\n    {\n        \"id\": \"5bed20674c978f0010108368\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-15T07:29:43.536Z\",\n        \"updatedAt\": \"2018-11-15T07:29:43.536Z\"\n    },\n    {\n        \"id\": \"5bed206d4c978f001010836a\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-15T07:29:49.594Z\",\n        \"updatedAt\": \"2018-11-15T07:29:50.354Z\"\n    },\n    {\n        \"id\": \"5bed206f4c978f001010836b\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-15T07:29:51.149Z\",\n        \"updatedAt\": \"2018-11-15T07:29:51.910Z\"\n    },\n    {\n        \"id\": \"5bed20704c978f001010836c\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-15T07:29:52.675Z\",\n        \"updatedAt\": \"2018-11-15T07:29:53.431Z\"\n    },\n    {\n        \"id\": \"5bed20724c978f001010836d\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-15T07:29:54.190Z\",\n        \"updatedAt\": \"2018-11-15T07:29:54.948Z\"\n    },\n    {\n        \"id\": \"5bed20734c978f001010836e\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-15T07:29:55.711Z\",\n        \"updatedAt\": \"2018-11-15T07:29:56.473Z\"\n    },\n    {\n        \"id\": \"5bed20754c978f001010836f\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-15T07:29:57.235Z\",\n        \"updatedAt\": \"2018-11-15T07:29:57.996Z\"\n    },\n    {\n        \"id\": \"5bed20764c978f0010108370\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-15T07:29:58.761Z\",\n        \"updatedAt\": \"2018-11-15T07:29:59.520Z\"\n    },\n    {\n        \"id\": \"5bed20784c978f0010108371\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-15T07:30:00.288Z\",\n        \"updatedAt\": \"2018-11-15T07:30:00.288Z\"\n    },\n    {\n        \"id\": \"5bed20794c978f0010108372\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-15T07:30:01.825Z\",\n        \"updatedAt\": \"2018-11-15T07:30:01.825Z\"\n    },\n    {\n        \"id\": \"5bed207c4c978f0010108373\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-15T07:30:04.807Z\",\n        \"updatedAt\": \"2018-11-15T07:30:04.807Z\"\n    },\n    {\n        \"id\": \"5bed29e14c978f0010108457\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-15T08:10:09.751Z\",\n        \"updatedAt\": \"2018-11-15T08:10:09.751Z\"\n    },\n    {\n        \"id\": \"5bed29e24c978f0010108458\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-15T08:10:10.499Z\",\n        \"updatedAt\": \"2018-11-15T08:10:10.499Z\"\n    },\n    {\n        \"id\": \"5bed29e34c978f0010108459\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-15T08:10:11.257Z\",\n        \"updatedAt\": \"2018-11-15T08:10:11.257Z\"\n    },\n    {\n        \"id\": \"5bed29e44c978f001010845a\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-15T08:10:12.005Z\",\n        \"updatedAt\": \"2018-11-15T08:10:12.005Z\"\n    },\n    {\n        \"id\": \"5bed29e44c978f001010845b\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-15T08:10:12.752Z\",\n        \"updatedAt\": \"2018-11-15T08:10:12.752Z\"\n    },\n    {\n        \"id\": \"5bed29e54c978f001010845c\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-15T08:10:13.504Z\",\n        \"updatedAt\": \"2018-11-15T08:10:13.504Z\"\n    },\n    {\n        \"id\": \"5bed29e64c978f001010845d\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-15T08:10:14.253Z\",\n        \"updatedAt\": \"2018-11-15T08:10:14.253Z\"\n    },\n    {\n        \"id\": \"5bed29ec4c978f001010845f\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-15T08:10:20.222Z\",\n        \"updatedAt\": \"2018-11-15T08:10:20.972Z\"\n    },\n    {\n        \"id\": \"5bed29ed4c978f0010108460\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-15T08:10:21.719Z\",\n        \"updatedAt\": \"2018-11-15T08:10:22.470Z\"\n    },\n    {\n        \"id\": \"5bed29ef4c978f0010108461\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-15T08:10:23.218Z\",\n        \"updatedAt\": \"2018-11-15T08:10:23.967Z\"\n    },\n    {\n        \"id\": \"5bed29f04c978f0010108462\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-15T08:10:24.715Z\",\n        \"updatedAt\": \"2018-11-15T08:10:25.467Z\"\n    },\n    {\n        \"id\": \"5bed29f24c978f0010108463\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-15T08:10:26.221Z\",\n        \"updatedAt\": \"2018-11-15T08:10:26.976Z\"\n    },\n    {\n        \"id\": \"5bed29f34c978f0010108464\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-15T08:10:27.727Z\",\n        \"updatedAt\": \"2018-11-15T08:10:28.483Z\"\n    },\n    {\n        \"id\": \"5bed29f54c978f0010108465\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-15T08:10:29.239Z\",\n        \"updatedAt\": \"2018-11-15T08:10:29.997Z\"\n    },\n    {\n        \"id\": \"5bed29f64c978f0010108466\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-15T08:10:30.751Z\",\n        \"updatedAt\": \"2018-11-15T08:10:30.751Z\"\n    },\n    {\n        \"id\": \"5bed29f84c978f0010108467\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-15T08:10:32.303Z\",\n        \"updatedAt\": \"2018-11-15T08:10:32.303Z\"\n    },\n    {\n        \"id\": \"5bed29fb4c978f0010108468\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-15T08:10:35.301Z\",\n        \"updatedAt\": \"2018-11-15T08:10:35.301Z\"\n    },\n    {\n        \"id\": \"5bee4a594c978f0010108583\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-16T04:40:57.290Z\",\n        \"updatedAt\": \"2018-11-16T04:40:57.290Z\"\n    },\n    {\n        \"id\": \"5bee4a5a4c978f0010108584\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-16T04:40:58.053Z\",\n        \"updatedAt\": \"2018-11-16T04:40:58.053Z\"\n    },\n    {\n        \"id\": \"5bee4a5a4c978f0010108585\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-16T04:40:58.809Z\",\n        \"updatedAt\": \"2018-11-16T04:40:58.809Z\"\n    },\n    {\n        \"id\": \"5bee4a5b4c978f0010108586\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-16T04:40:59.571Z\",\n        \"updatedAt\": \"2018-11-16T04:40:59.571Z\"\n    },\n    {\n        \"id\": \"5bee4a5c4c978f0010108587\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-16T04:41:00.361Z\",\n        \"updatedAt\": \"2018-11-16T04:41:00.361Z\"\n    },\n    {\n        \"id\": \"5bee4a5d4c978f0010108588\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-16T04:41:01.166Z\",\n        \"updatedAt\": \"2018-11-16T04:41:01.166Z\"\n    },\n    {\n        \"id\": \"5bee4a5d4c978f0010108589\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-16T04:41:01.947Z\",\n        \"updatedAt\": \"2018-11-16T04:41:01.947Z\"\n    },\n    {\n        \"id\": \"5bee4a644c978f001010858c\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-16T04:41:08.031Z\",\n        \"updatedAt\": \"2018-11-16T04:41:08.804Z\"\n    },\n    {\n        \"id\": \"5bee4a654c978f001010858d\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-16T04:41:09.620Z\",\n        \"updatedAt\": \"2018-11-16T04:41:10.486Z\"\n    },\n    {\n        \"id\": \"5bee4a674c978f001010858e\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-16T04:41:11.241Z\",\n        \"updatedAt\": \"2018-11-16T04:41:12.007Z\"\n    },\n    {\n        \"id\": \"5bee4a684c978f001010858f\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-16T04:41:12.767Z\",\n        \"updatedAt\": \"2018-11-16T04:41:13.527Z\"\n    },\n    {\n        \"id\": \"5bee4a6a4c978f0010108590\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-16T04:41:14.283Z\",\n        \"updatedAt\": \"2018-11-16T04:41:15.043Z\"\n    },\n    {\n        \"id\": \"5bee4a6b4c978f0010108591\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-16T04:41:15.798Z\",\n        \"updatedAt\": \"2018-11-16T04:41:16.562Z\"\n    },\n    {\n        \"id\": \"5bee4a6d4c978f0010108592\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-16T04:41:17.329Z\",\n        \"updatedAt\": \"2018-11-16T04:41:18.090Z\"\n    },\n    {\n        \"id\": \"5bee4a6e4c978f0010108593\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-16T04:41:18.850Z\",\n        \"updatedAt\": \"2018-11-16T04:41:18.850Z\"\n    },\n    {\n        \"id\": \"5bee4a704c978f0010108594\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-16T04:41:20.392Z\",\n        \"updatedAt\": \"2018-11-16T04:41:20.392Z\"\n    },\n    {\n        \"id\": \"5bee4a734c978f0010108595\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-16T04:41:23.384Z\",\n        \"updatedAt\": \"2018-11-16T04:41:23.384Z\"\n    },\n    {\n        \"id\": \"5bee9cfd6d24d3001005aca5\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-16T10:33:33.624Z\",\n        \"updatedAt\": \"2018-11-16T10:33:33.624Z\"\n    },\n    {\n        \"id\": \"5bee9cfe6d24d3001005aca6\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-16T10:33:34.451Z\",\n        \"updatedAt\": \"2018-11-16T10:33:34.451Z\"\n    },\n    {\n        \"id\": \"5bee9cff6d24d3001005aca7\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-16T10:33:35.238Z\",\n        \"updatedAt\": \"2018-11-16T10:33:35.238Z\"\n    },\n    {\n        \"id\": \"5bee9d006d24d3001005aca8\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-16T10:33:36.067Z\",\n        \"updatedAt\": \"2018-11-16T10:33:36.067Z\"\n    },\n    {\n        \"id\": \"5bee9d006d24d3001005aca9\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-16T10:33:36.844Z\",\n        \"updatedAt\": \"2018-11-16T10:33:36.844Z\"\n    },\n    {\n        \"id\": \"5bee9d026d24d3001005acaa\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-16T10:33:38.648Z\",\n        \"updatedAt\": \"2018-11-16T10:33:38.648Z\"\n    },\n    {\n        \"id\": \"5bee9d036d24d3001005acab\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-16T10:33:39.425Z\",\n        \"updatedAt\": \"2018-11-16T10:33:39.425Z\"\n    },\n    {\n        \"id\": \"5bee9d096d24d3001005acad\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-16T10:33:45.600Z\",\n        \"updatedAt\": \"2018-11-16T10:33:46.391Z\"\n    },\n    {\n        \"id\": \"5bee9d0b6d24d3001005acae\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-16T10:33:47.162Z\",\n        \"updatedAt\": \"2018-11-16T10:33:47.952Z\"\n    },\n    {\n        \"id\": \"5bee9d0d6d24d3001005acaf\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-16T10:33:49.793Z\",\n        \"updatedAt\": \"2018-11-16T10:33:50.615Z\"\n    },\n    {\n        \"id\": \"5bee9d0f6d24d3001005acb0\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-16T10:33:51.463Z\",\n        \"updatedAt\": \"2018-11-16T10:33:52.350Z\"\n    },\n    {\n        \"id\": \"5bee9d116d24d3001005acb1\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-16T10:33:53.262Z\",\n        \"updatedAt\": \"2018-11-16T10:33:54.116Z\"\n    },\n    {\n        \"id\": \"5bee9d126d24d3001005acb2\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-16T10:33:54.879Z\",\n        \"updatedAt\": \"2018-11-16T10:33:55.687Z\"\n    },\n    {\n        \"id\": \"5bee9d146d24d3001005acb3\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-16T10:33:56.465Z\",\n        \"updatedAt\": \"2018-11-16T10:33:57.249Z\"\n    },\n    {\n        \"id\": \"5bee9d166d24d3001005acb4\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-16T10:33:58.042Z\",\n        \"updatedAt\": \"2018-11-16T10:33:58.042Z\"\n    },\n    {\n        \"id\": \"5bee9d176d24d3001005acb5\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-16T10:33:59.576Z\",\n        \"updatedAt\": \"2018-11-16T10:33:59.576Z\"\n    },\n    {\n        \"id\": \"5bee9d1a6d24d3001005acb6\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-16T10:34:02.590Z\",\n        \"updatedAt\": \"2018-11-16T10:34:02.590Z\"\n    },\n    {\n        \"id\": \"5bf232e96d24d3001005ad9c\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-19T03:50:01.145Z\",\n        \"updatedAt\": \"2018-11-19T03:50:01.145Z\"\n    },\n    {\n        \"id\": \"5bf232e96d24d3001005ad9d\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-19T03:50:01.980Z\",\n        \"updatedAt\": \"2018-11-19T03:50:01.980Z\"\n    },\n    {\n        \"id\": \"5bf232ea6d24d3001005ad9e\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-19T03:50:02.748Z\",\n        \"updatedAt\": \"2018-11-19T03:50:02.748Z\"\n    },\n    {\n        \"id\": \"5bf232eb6d24d3001005ad9f\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-19T03:50:03.515Z\",\n        \"updatedAt\": \"2018-11-19T03:50:03.515Z\"\n    },\n    {\n        \"id\": \"5bf232ec6d24d3001005ada0\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-19T03:50:04.287Z\",\n        \"updatedAt\": \"2018-11-19T03:50:04.287Z\"\n    },\n    {\n        \"id\": \"5bf232ed6d24d3001005ada1\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-19T03:50:05.059Z\",\n        \"updatedAt\": \"2018-11-19T03:50:05.059Z\"\n    },\n    {\n        \"id\": \"5bf232ed6d24d3001005ada2\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-19T03:50:05.832Z\",\n        \"updatedAt\": \"2018-11-19T03:50:05.832Z\"\n    },\n    {\n        \"id\": \"5bf232f36d24d3001005ada4\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-19T03:50:11.913Z\",\n        \"updatedAt\": \"2018-11-19T03:50:12.683Z\"\n    },\n    {\n        \"id\": \"5bf232f56d24d3001005ada5\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-19T03:50:13.446Z\",\n        \"updatedAt\": \"2018-11-19T03:50:14.247Z\"\n    },\n    {\n        \"id\": \"5bf232f76d24d3001005ada6\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-19T03:50:15.017Z\",\n        \"updatedAt\": \"2018-11-19T03:50:15.795Z\"\n    },\n    {\n        \"id\": \"5bf232f86d24d3001005ada7\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-19T03:50:16.598Z\",\n        \"updatedAt\": \"2018-11-19T03:50:17.390Z\"\n    },\n    {\n        \"id\": \"5bf232fa6d24d3001005ada8\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-19T03:50:18.154Z\",\n        \"updatedAt\": \"2018-11-19T03:50:18.924Z\"\n    },\n    {\n        \"id\": \"5bf232fb6d24d3001005ada9\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-19T03:50:19.693Z\",\n        \"updatedAt\": \"2018-11-19T03:50:20.457Z\"\n    },\n    {\n        \"id\": \"5bf232fd6d24d3001005adaa\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-19T03:50:21.222Z\",\n        \"updatedAt\": \"2018-11-19T03:50:21.987Z\"\n    },\n    {\n        \"id\": \"5bf232fe6d24d3001005adab\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-19T03:50:22.780Z\",\n        \"updatedAt\": \"2018-11-19T03:50:22.780Z\"\n    },\n    {\n        \"id\": \"5bf233006d24d3001005adac\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-19T03:50:24.316Z\",\n        \"updatedAt\": \"2018-11-19T03:50:24.316Z\"\n    },\n    {\n        \"id\": \"5bf233036d24d3001005adad\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-19T03:50:27.324Z\",\n        \"updatedAt\": \"2018-11-19T03:50:27.324Z\"\n    },\n    {\n        \"id\": \"5bf23a646d24d3001005ae90\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-19T04:21:56.814Z\",\n        \"updatedAt\": \"2018-11-19T04:21:56.814Z\"\n    },\n    {\n        \"id\": \"5bf23a656d24d3001005ae91\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-19T04:21:57.577Z\",\n        \"updatedAt\": \"2018-11-19T04:21:57.577Z\"\n    },\n    {\n        \"id\": \"5bf23a666d24d3001005ae92\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-19T04:21:58.349Z\",\n        \"updatedAt\": \"2018-11-19T04:21:58.349Z\"\n    },\n    {\n        \"id\": \"5bf23a676d24d3001005ae93\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-19T04:21:59.110Z\",\n        \"updatedAt\": \"2018-11-19T04:21:59.110Z\"\n    },\n    {\n        \"id\": \"5bf23a676d24d3001005ae94\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-19T04:21:59.872Z\",\n        \"updatedAt\": \"2018-11-19T04:21:59.872Z\"\n    },\n    {\n        \"id\": \"5bf23a686d24d3001005ae95\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-19T04:22:00.672Z\",\n        \"updatedAt\": \"2018-11-19T04:22:00.672Z\"\n    },\n    {\n        \"id\": \"5bf23a696d24d3001005ae96\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-19T04:22:01.437Z\",\n        \"updatedAt\": \"2018-11-19T04:22:01.437Z\"\n    },\n    {\n        \"id\": \"5bf23a6f6d24d3001005ae98\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-11-19T04:22:07.489Z\",\n        \"updatedAt\": \"2018-11-19T04:22:08.286Z\"\n    },\n    {\n        \"id\": \"5bf23a716d24d3001005ae99\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-11-19T04:22:09.053Z\",\n        \"updatedAt\": \"2018-11-19T04:22:09.816Z\"\n    },\n    {\n        \"id\": \"5bf23a726d24d3001005ae9a\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-11-19T04:22:10.582Z\",\n        \"updatedAt\": \"2018-11-19T04:22:11.347Z\"\n    },\n    {\n        \"id\": \"5bf23a746d24d3001005aeb0\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-11-19T04:22:12.107Z\",\n        \"updatedAt\": \"2018-11-19T04:22:12.867Z\"\n    },\n    {\n        \"id\": \"5bf23a756d24d3001005aeb1\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-11-19T04:22:13.626Z\",\n        \"updatedAt\": \"2018-11-19T04:22:14.389Z\"\n    },\n    {\n        \"id\": \"5bf23a776d24d3001005aeb3\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-11-19T04:22:15.152Z\",\n        \"updatedAt\": \"2018-11-19T04:22:15.918Z\"\n    },\n    {\n        \"id\": \"5bf23a786d24d3001005aeb4\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-11-19T04:22:16.681Z\",\n        \"updatedAt\": \"2018-11-19T04:22:17.443Z\"\n    },\n    {\n        \"id\": \"5bf23a7a6d24d3001005aeb5\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-19T04:22:18.219Z\",\n        \"updatedAt\": \"2018-11-19T04:22:18.219Z\"\n    },\n    {\n        \"id\": \"5bf23a7b6d24d3001005aeb6\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-19T04:22:19.855Z\",\n        \"updatedAt\": \"2018-11-19T04:22:19.855Z\"\n    },\n    {\n        \"id\": \"5bf23a7e6d24d3001005aeb7\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-19T04:22:22.848Z\",\n        \"updatedAt\": \"2018-11-19T04:22:22.848Z\"\n    }\n]\n\n",
									"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:31:51 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-lxkkr\nX-XSS-Protection=1; mode=block\ntransfer-encoding=chunked\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 2,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Create All Type Question using Question Service - Negative Data Driven Test Specification2",
			"fileName": "C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\specs\\Other\\03. Create All Type Question - Negative Data Driven Tests2.spec",
			"tags": [
				"create_question",
				"create_question_all_type",
				"create_question-negative_tests",
				"negative"
			],
			"executionTime": 42169,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 2519,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 1263,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 82,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 39,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1142,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 917ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf509eeb738ba001027e29b\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785518914,\n        \"updatedAt\": 1542785518914\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:31:58.914Z\",\n    \"updatedAt\": \"2018-11-21T07:31:58.917Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:31:58 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-bdwm7\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf509eeb738ba001027e29b\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 73,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manua"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 38,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf509eeb738ba001027e29b\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manua\",\n  \"deckId\": \"5bf509eeb738ba001027e29b\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1145,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 937ms\n\n",
									"Response is: \n{\n    \"message\": \"creatoredType: Invalid value 'Manua'\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=7e4b780d-4865-4b02-876a-fbab134235e0\nDate=Wed, 21 Nov 2018 07:32:00 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=104\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"creatoredType: Invalid value 'Manua'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 0
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1876,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 1062,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 54,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 41,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 966,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 802ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf509f1b738ba001027e29c\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785521219,\n        \"updatedAt\": 1542785521219\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:01.219Z\",\n    \"updatedAt\": \"2018-11-21T07:32:01.222Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:01 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-dsrjh\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"\"5bf509f1b738ba001027e29c\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 56,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											""
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 34,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf509f1b738ba001027e29c\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"\",\n  \"deckId\": \"5bf509f1b738ba001027e29c\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 723,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 523ms\n\n",
									"Response is: \n{\n    \"message\": \"creatoredType: Invalid value ''\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=4f57e59b-5ae9-4d80-9549-92df9d586336\nDate=Wed, 21 Nov 2018 07:32:02 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=99\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"creatoredType: Invalid value ''"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 1
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 2116,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 1019,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 57,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 32,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 930,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 751ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf509f3b738ba001027e29d\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785523128,\n        \"updatedAt\": 1542785523128\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:03.128Z\",\n    \"updatedAt\": \"2018-11-21T07:32:03.130Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:03 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-nvll1\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"\"5bf509f3b738ba001027e29d\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 66,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"AL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 34,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf509f3b738ba001027e29d\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf509f3b738ba001027e29d\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"AL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 996,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 806ms\n\n",
									"Response is: \n{\n    \"message\": \"kind: Invalid value 'AL'\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=0e89badb-16af-4023-9f8c-d653b991916b\nDate=Wed, 21 Nov 2018 07:32:04 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=92\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"kind: Invalid value 'AL'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 2
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1954,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 1014,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 63,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 32,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 919,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 748ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf509f5b738ba001027e29e\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785525261,\n        \"updatedAt\": 1542785525261\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:05.261Z\",\n    \"updatedAt\": \"2018-11-21T07:32:05.264Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:05 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-5v6z0\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf509f5b738ba001027e29e\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 57,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											""
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 26,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf509f5b738ba001027e29e\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf509f5b738ba001027e29e\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 857,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 704ms\n\n",
									"Response is: \n{\n    \"message\": \"kind: Invalid value ''\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=9871ee06-2689-4ec3-8337-48994d681213\nDate=Wed, 21 Nov 2018 07:32:06 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=90\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"kind: Invalid value ''"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 3
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 2032,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 1041,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 68,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 31,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 942,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 744ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf509f7b738ba001027e29f\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785527269,\n        \"updatedAt\": 1542785527269\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:07.269Z\",\n    \"updatedAt\": \"2018-11-21T07:32:07.271Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:07 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-lxkkr\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf509f7b738ba001027e29f\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 61,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 30,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf509f7b738ba001027e29f\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf509f7b738ba001027e29f\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": a\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 899,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 719ms\n\n",
									"Response is: \n{\n    \"message\": \"Unrecognized token 'a': was expecting ('true', 'false' or 'null')\\n at [Source: java.io.PushbackInputStream@b550e60; line: 18, column: 18]\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=28b51d09-b169-4941-a3db-e20f7256a88a\nDate=Wed, 21 Nov 2018 07:32:08 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=206\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 4
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1886,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 1012,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 67,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 30,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 914,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 751ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf509f9b738ba001027e2a0\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785529244,\n        \"updatedAt\": 1542785529244\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:09.244Z\",\n    \"updatedAt\": \"2018-11-21T07:32:09.246Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:09 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-2j1v1\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf509f9b738ba001027e2a0\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 59,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 33,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf509f9b738ba001027e2a0\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf509f9b738ba001027e2a0\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": a,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 782,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 585ms\n\n",
									"Response is: \n{\n    \"message\": \"Unrecognized token 'a': was expecting ('true', 'false' or 'null')\\n at [Source: java.io.PushbackInputStream@2640bb3; line: 22, column: 16]\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=40b03365-6959-4500-b7ff-1f1a6106db64\nDate=Wed, 21 Nov 2018 07:32:10 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=206\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 5
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 2027,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 996,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 58,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 26,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 912,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 753ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf509fbb738ba001027e2a1\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785531076,\n        \"updatedAt\": 1542785531076\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:11.076Z\",\n    \"updatedAt\": \"2018-11-21T07:32:11.079Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:11 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-5v6z0\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf509fbb738ba001027e2a1\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 74,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 30,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf509fbb738ba001027e2a1\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf509fbb738ba001027e2a1\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": a,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 927,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 787ms\n\n",
									"Response is: \n{\n    \"message\": \"Unrecognized token 'a': was expecting ('true', 'false' or 'null')\\n at [Source: java.io.PushbackInputStream@4558e57c; line: 23, column: 26]\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=1a06e78d-f0b2-4288-9d29-56ccecccd234\nDate=Wed, 21 Nov 2018 07:32:12 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=207\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 6
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 2150,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 1082,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 57,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 32,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 993,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 822ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf509fdb738ba001027e2a2\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785533318,\n        \"updatedAt\": 1542785533318\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:13.318Z\",\n    \"updatedAt\": \"2018-11-21T07:32:13.320Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:13 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-d835g\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf509fdb738ba001027e2a2\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 49,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"@"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 33,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf509fdb738ba001027e2a2\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf509fdb738ba001027e2a2\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": @,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 985,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 817ms\n\n",
									"Response is: \n{\n    \"message\": \"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')\\n at [Source: java.io.PushbackInputStream@52d160e; line: 23, column: 25]\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=438c88e1-d41a-4bd0-a380-e21c0c22896c\nDate=Wed, 21 Nov 2018 07:32:14 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=260\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 7
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1756,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 978,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 57,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 24,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 897,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 729ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf509ffb738ba001027e2a3\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785535377,\n        \"updatedAt\": 1542785535377\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:15.377Z\",\n    \"updatedAt\": \"2018-11-21T07:32:15.380Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:15 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-6ct5d\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"\"5bf509ffb738ba001027e2a3\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 54,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											""
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 25,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf509ffb738ba001027e2a3\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf509ffb738ba001027e2a3\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": ,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 698,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 551ms\n\n",
									"Response is: \n{\n    \"message\": \"Unexpected character (',' (code 44)): expected a value\\n at [Source: java.io.PushbackInputStream@3bc62b3d; line: 23, column: 25]\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=599be489-1db3-4845-a1b0-46f67f05853b\nDate=Wed, 21 Nov 2018 07:32:16 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=196\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unexpected character (',' (code 44)): expected a value"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 8
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1603,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 763,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 48,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 28,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 687,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 504ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf50a00b738ba001027e2a4\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785536944,\n        \"updatedAt\": 1542785536944\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:16.944Z\",\n    \"updatedAt\": \"2018-11-21T07:32:16.947Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:16 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-bdwm7\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf50a00b738ba001027e2a4\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 66,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"@"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 32,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf50a00b738ba001027e2a4\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf50a00b738ba001027e2a4\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": @,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 741,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 555ms\n\n",
									"Response is: \n{\n    \"message\": \"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')\\n at [Source: java.io.PushbackInputStream@385ccfe2; line: 24, column: 27]\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=4ec709a6-c259-4c42-b3a5-8a3202d0bf02\nDate=Wed, 21 Nov 2018 07:32:17 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=261\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 9
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1752,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 786,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 57,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 29,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 700,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 504ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf50a02b738ba001027e2a5\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785538584,\n        \"updatedAt\": 1542785538584\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:18.584Z\",\n    \"updatedAt\": \"2018-11-21T07:32:18.586Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:18 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-hq9pm\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf50a02b738ba001027e2a5\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 51,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 34,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf50a02b738ba001027e2a5\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf50a02b738ba001027e2a5\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": a,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 881,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 710ms\n\n",
									"Response is: \n{\n    \"message\": \"Unrecognized token 'a': was expecting ('true', 'false' or 'null')\\n at [Source: java.io.PushbackInputStream@20fb3700; line: 24, column: 28]\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=7e4b780d-4865-4b02-876a-fbab134235e0\nDate=Wed, 21 Nov 2018 07:32:19 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=207\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 10
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1548,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 751,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 48,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 27,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 676,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 493ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf50a04b738ba001027e2a6\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785540328,\n        \"updatedAt\": 1542785540328\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:20.328Z\",\n    \"updatedAt\": \"2018-11-21T07:32:20.330Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:20 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-2j1v1\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf50a04b738ba001027e2a6\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 55,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 30,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf50a04b738ba001027e2a6\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf50a04b738ba001027e2a6\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": a,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 712,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 556ms\n\n",
									"Response is: \n{\n    \"message\": \"Unrecognized token 'a': was expecting ('true', 'false' or 'null')\\n at [Source: java.io.PushbackInputStream@440af864; line: 26, column: 21]\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=4f57e59b-5ae9-4d80-9549-92df9d586336\nDate=Wed, 21 Nov 2018 07:32:21 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=207\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 11
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1760,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 956,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 61,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 28,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 867,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 698ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf50a06b738ba001027e2a7\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785542098,\n        \"updatedAt\": 1542785542098\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:22.098Z\",\n    \"updatedAt\": \"2018-11-21T07:32:22.101Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:22 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-d835g\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf50a06b738ba001027e2a7\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 65,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"@"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 33,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf50a06b738ba001027e2a7\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf50a06b738ba001027e2a7\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": @,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 706,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 540ms\n\n",
									"Response is: \n{\n    \"message\": \"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')\\n at [Source: java.io.PushbackInputStream@6b2c81b2; line: 26, column: 20]\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=0e89badb-16af-4023-9f8c-d653b991916b\nDate=Wed, 21 Nov 2018 07:32:22 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=261\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 12
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1492,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 751,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 54,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 26,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 671,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 514ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf50a07b738ba001027e2a8\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785543673,\n        \"updatedAt\": 1542785543673\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:23.673Z\",\n    \"updatedAt\": \"2018-11-21T07:32:23.676Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:23 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-bdwm7\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf50a07b738ba001027e2a8\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 58,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"@"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 28,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf50a07b738ba001027e2a8\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf50a07b738ba001027e2a8\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": @,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 654,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 491ms\n\n",
									"Response is: \n{\n    \"message\": \"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')\\n at [Source: java.io.PushbackInputStream@cb3b1ac; line: 27, column: 15]\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=9871ee06-2689-4ec3-8337-48994d681213\nDate=Wed, 21 Nov 2018 07:32:24 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=260\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 13
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1448,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 741,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 47,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 29,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 665,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 521ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf50a09b738ba001027e2a9\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785545166,\n        \"updatedAt\": 1542785545166\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:25.166Z\",\n    \"updatedAt\": \"2018-11-21T07:32:25.169Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:25 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-dsrjh\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf50a09b738ba001027e2a9\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 47,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 28,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf50a09b738ba001027e2a9\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf50a09b738ba001027e2a9\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": a,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 632,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 489ms\n\n",
									"Response is: \n{\n    \"message\": \"Unrecognized token 'a': was expecting ('true', 'false' or 'null')\\n at [Source: java.io.PushbackInputStream@48428e82; line: 27, column: 16]\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=28b51d09-b169-4941-a3db-e20f7256a88a\nDate=Wed, 21 Nov 2018 07:32:25 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=207\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 14
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1464,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 729,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 51,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 25,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 653,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 516ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf50a0ab738ba001027e2aa\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785546624,\n        \"updatedAt\": 1542785546624\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:26.624Z\",\n    \"updatedAt\": \"2018-11-21T07:32:26.626Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:26 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-dsrjh\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf50a0ab738ba001027e2aa\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 54,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 23,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf50a0ab738ba001027e2aa\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf50a0ab738ba001027e2aa\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": a\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 657,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 499ms\n\n",
									"Response is: \n{\n    \"message\": \"Unrecognized token 'a': was expecting ('true', 'false' or 'null')\\n at [Source: java.io.PushbackInputStream@7dd9af94; line: 28, column: 17]\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=40b03365-6959-4500-b7ff-1f1a6106db64\nDate=Wed, 21 Nov 2018 07:32:27 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=207\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 15
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1551,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 794,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 48,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 38,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 708,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 539ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf50a0cb738ba001027e2ab\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785548148,\n        \"updatedAt\": 1542785548148\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:28.148Z\",\n    \"updatedAt\": \"2018-11-21T07:32:28.150Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:28 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-d835g\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf50a0cb738ba001027e2ab\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 46,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"\"\""
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 25,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf50a0cb738ba001027e2ab\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf50a0cb738ba001027e2ab\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        \"\"\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 686,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 537ms\n\n",
									"Response is: \n{\n    \"message\": \"'correctAnswers' cannot be null or empty\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=1a06e78d-f0b2-4288-9d29-56ccecccd234\nDate=Wed, 21 Nov 2018 07:32:28 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=108\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"'correctAnswers' cannot be null or empty"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 16
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1932,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 1031,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 52,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 43,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 936,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 741ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf50a0db738ba001027e2ac\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785549861,\n        \"updatedAt\": 1542785549861\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:29.861Z\",\n    \"updatedAt\": \"2018-11-21T07:32:29.864Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:29 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-bdwm7\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf50a0db738ba001027e2ac\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 49,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"null"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 25,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf50a0db738ba001027e2ac\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf50a0db738ba001027e2ac\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        null\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 826,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 668ms\n\n",
									"Response is: \n{\n    \"message\": \"'correctAnswers' cannot be null or empty\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=438c88e1-d41a-4bd0-a380-e21c0c22896c\nDate=Wed, 21 Nov 2018 07:32:30 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=108\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"'correctAnswers' cannot be null or empty"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 17
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1560,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 786,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 58,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 25,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 703,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 542ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf50a0fb738ba001027e2ad\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785551681,\n        \"updatedAt\": 1542785551681\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:31.681Z\",\n    \"updatedAt\": \"2018-11-21T07:32:31.684Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:31 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-5v6z0\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf50a0fb738ba001027e2ad\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 61,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"\"a\""
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 38,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf50a0fb738ba001027e2ad\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf50a0fb738ba001027e2ad\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": \"a\",\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 675,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 499ms\n\n",
									"Response is: \n{\n    \"message\": \"answers: Invalid value 'a'\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=599be489-1db3-4845-a1b0-46f67f05853b\nDate=Wed, 21 Nov 2018 07:32:32 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=94\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"answers: Invalid value 'a'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 18
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1728,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 969,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 46,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 26,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 897,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 746ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf50a11b738ba001027e2ae\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785553445,\n        \"updatedAt\": 1542785553445\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:33.445Z\",\n    \"updatedAt\": \"2018-11-21T07:32:33.448Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:33 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-81spw\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf50a11b738ba001027e2ae\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 52,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"\"@\""
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 31,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf50a11b738ba001027e2ae\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf50a11b738ba001027e2ae\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": \"@\",\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 675,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 526ms\n\n",
									"Response is: \n{\n    \"message\": \"answers: Invalid value '@'\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=4ec709a6-c259-4c42-b3a5-8a3202d0bf02\nDate=Wed, 21 Nov 2018 07:32:34 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=94\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"answers: Invalid value '@'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 19
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1494,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 755,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 47,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 24,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 684,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 542ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf50a12b738ba001027e2af\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785554978,\n        \"updatedAt\": 1542785554978\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:34.978Z\",\n    \"updatedAt\": \"2018-11-21T07:32:34.980Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:34 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-6ct5d\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf50a12b738ba001027e2af\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 52,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"\"a\""
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 25,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf50a12b738ba001027e2af\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf50a12b738ba001027e2af\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": \"a\",\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 662,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 529ms\n\n",
									"Response is: \n{\n    \"message\": \"answers: Invalid value 'a'\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=7e4b780d-4865-4b02-876a-fbab134235e0\nDate=Wed, 21 Nov 2018 07:32:35 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=94\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"answers: Invalid value 'a'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 20
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1487,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 715,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 50,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 23,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 642,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 504ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf50a14b738ba001027e2b0\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785556460,\n        \"updatedAt\": 1542785556460\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:36.460Z\",\n    \"updatedAt\": \"2018-11-21T07:32:36.463Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:36 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-5v6z0\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf50a14b738ba001027e2b0\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 55,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"\"@\""
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 30,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf50a14b738ba001027e2b0\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf50a14b738ba001027e2b0\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": \"@\",\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 686,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 515ms\n\n",
									"Response is: \n{\n    \"message\": \"answers: Invalid value '@'\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=4f57e59b-5ae9-4d80-9549-92df9d586336\nDate=Wed, 21 Nov 2018 07:32:37 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=94\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"answers: Invalid value '@'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 21
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1449,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 708,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 48,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 24,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 636,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 512ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf50a15b738ba001027e2b1\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785557959,\n        \"updatedAt\": 1542785557959\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:37.959Z\",\n    \"updatedAt\": \"2018-11-21T07:32:37.961Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:37 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-5v6z0\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf50a15b738ba001027e2b1\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 45,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"AL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											""
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 20,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf50a15b738ba001027e2b1\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf50a15b738ba001027e2b1\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"AL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 676,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 536ms\n\n",
									"Response is: \n{\n    \"message\": \"kind: Invalid value 'AL'\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=0e89badb-16af-4023-9f8c-d653b991916b\nDate=Wed, 21 Nov 2018 07:32:38 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=92\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"kind: Invalid value 'AL'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 22
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1585,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 796,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 50,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 23,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 723,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 592ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf50a17b738ba001027e2b2\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785559516,\n        \"updatedAt\": 1542785559516\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:39.516Z\",\n    \"updatedAt\": \"2018-11-21T07:32:39.518Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:39 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-dsrjh\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf50a17b738ba001027e2b2\" is successfully saved as a text in Scenario Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 52,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											""
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEX"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 25,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckId] is: \"5bf50a17b738ba001027e2b2\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf50a17b738ba001027e2b2\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft?\",\n    \"promptType\": \"TEX\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Red\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"White\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Blue\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Orange\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 712,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 567ms\n\n",
									"Response is: \n{\n    \"message\": \"kind: Invalid value ''\",\n    \"description\": null,\n    \"fieldErrors\": null\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\ncorrelation-id=9871ee06-2689-4ec3-8337-48994d681213\nDate=Wed, 21 Nov 2018 07:32:40 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=90\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"kind: Invalid value ''"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 23
				}
			],
			"isTableDriven": true,
			"datatable": {
				"headers": [
					"scenario",
					"api",
					"creatorId",
					"creatorPlatform",
					"creatoredSource",
					"creatoredType",
					"deckId",
					"tempQuestionId",
					"kind",
					"isDeleted",
					"learningObjectives",
					"imageUrl",
					"media",
					"prompt",
					"promptType",
					"timeout",
					"rationale",
					"boxId",
					"correctAttempts",
					"inCorrectAttempts",
					"lastAswered",
					"questionId",
					"skips",
					"userId",
					"correctAnswerList",
					"answer1Id",
					"answer1Value",
					"answer1Type",
					"answer1CaseSensitive",
					"answer2Id",
					"answer2Value",
					"answer2Type",
					"answer2CaseSensitive",
					"answer3Id",
					"answer3Value",
					"answer3Type",
					"answer3CaseSensitive",
					"answer4Id",
					"answer4Value",
					"answer4Type",
					"answer4CaseSensitive",
					"answer5Id",
					"answer5Value",
					"answer5Type",
					"answer5CaseSensitive",
					"tags",
					"message",
					"description",
					"fieldErrors"
				],
				"rows": [
					{
						"cells": [
							"Create a question using an invalid creatoredType",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manua",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"creatoredType: Invalid value 'Manua'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an empty creatoredType",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"creatoredType: Invalid value ''",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an invalid kind",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"AL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"kind: Invalid value 'AL'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an empty kind",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"kind: Invalid value ''",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string as the timeout",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"a",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the boxId",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"a",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the correctAttempts",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"a",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special characters value as the correctAttempts",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"@",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an empty value as the correctAttempts",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unexpected character (',' (code 44)): expected a value",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special characters value as the inCorrectAttempts",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"@",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the inCorrectAttempts",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"a",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the questionId",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"a",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special characters value as the questionId",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"@",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special characters value as the skips",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"@",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the skips",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"a",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the userId",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"a",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an empty string as the correctAnswerList",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"\"\"",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"'correctAnswers' cannot be null or empty",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using null value as the correctAnswerList",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"null",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"'correctAnswers' cannot be null or empty",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the answer1Id",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"\"a\"",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"answers: Invalid value 'a'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special character as the answer1Id",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"\"@\"",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"answers: Invalid value '@'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the answer2Id",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"\"a\"",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"answers: Invalid value 'a'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special character as the answer2Id",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"\"@\"",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"answers: Invalid value '@'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an empty questionPrompt",
							"Create MCQ Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"AL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"kind: Invalid value 'AL'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an invalid promptType",
							"Create MCQ Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEX",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"kind: Invalid value ''",
							"null",
							"null"
						]
					}
				]
			},
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 1,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Read From Excel File Specification",
			"fileName": "C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\specs\\Other\\10. Read from excel file.spec",
			"tags": [],
			"executionTime": 17,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "Invoke PI API using the test data in excel file",
					"tags": [],
					"executionTime": 17,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user saves test data inside excel file into data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Excel Sheet Name",
									"Key Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"TestData",
											"username"
										]
									},
									{
										"cells": [
											"Specification",
											"password",
											"TestData",
											"password"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "com.maxsoft.intelliapi.util.fileoperator.Excel.findRowNumber(Excel.java:76)\ncom.maxsoft.intelliapi.util.reader.ApiDocument.getDataFromExcel(ApiDocument.java:37)\ncom.maxsoft.intelliapi.api.ApiStepImpl.saveExcelDataToDataStore(ApiStepImpl.java:715)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.saveExcelDataToDataStore(AllStepsDefinitions.java:326)\n",
								"screenshot": "",
								"errorMessage": "java.lang.NullPointerException",
								"executionTime": 17,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"y",
											"Scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"#password",
											"y",
											"Specification",
											"password",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the access token in the response which is located inside the JSON Path of \"$.data\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 0,
			"failedScenarioCount": 1,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Create a list from data store values Specification",
			"fileName": "C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\specs\\Other\\02. Create a list from data store values.spec",
			"tags": [],
			"executionTime": 2,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Create a list from data store values",
					"tags": [],
					"executionTime": 2,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user save the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1",
											"Osanda Deshan"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3",
											"Software Automation"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2,
								"skippedReason": "",
								"messages": [
									"\"Osanda Deshan\" is successfully saved as a text in Scenario Data Store [variable1]",
									"\"Osanda Nimalarathna\" is successfully saved as a text in Specification Data Store [variable2]",
									"\"Software Automation\" is successfully saved as a text in Scenario Data Store [variable3]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user save the values inside data stores as a \"String\" list to another \"Scenario\" type data store as \"var1\"",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable1] is: \"Osanda Deshan\"\n\n",
									"Text inside Specification Data Store [variable2] is: \"Osanda Nimalarathna\"\n\n",
									"Text inside Scenario Data Store [variable3] is: \"Software Automation\"\n\n",
									"\"\"Osanda Deshan\",\"Osanda Nimalarathna\",\"Software Automation\"\" is successfully saved as a text in Scenario Data Store [var1]",
									"Value List: \"Osanda Deshan\",\"Osanda Nimalarathna\",\"Software Automation\""
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user read the values from data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"var1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [var1] is: \"\"Osanda Deshan\",\"Osanda Nimalarathna\",\"Software Automation\"\"\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 1,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "CRUD in One Scenario Specification",
			"fileName": "C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\specs\\Other\\04. CRUD in One Scenario.spec",
			"tags": [],
			"executionTime": 21079,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "CRUD operation for a sku and get all the 9 questions in a deck",
					"tags": [],
					"executionTime": 21079,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Create SKU\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 46,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/store/sku\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#skuId",
											"sampleSkuId1"
										]
									},
									{
										"cells": [
											"#price",
											"1.19"
										]
									},
									{
										"cells": [
											"#type",
											"DECK"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 28,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n \"skuId\":\"sampleSkuId1\",\n \"price\":1.19,\n \"type\":\"DECK\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 705,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/store/sku\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 582ms\n\n",
									"Response is: \n{\n    \"id\": \"5bf50a19b738ba001027e2b3\",\n    \"skuId\": \"sampleSkuId1\",\n    \"price\": 1.19,\n    \"type\": \"DECK\"\n}\n\n",
									"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:41 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-bdwm7\nX-XSS-Protection=1; mode=block\nContent-Length=83\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.skuId",
											"sampleSkuId1"
										]
									},
									{
										"cells": [
											"$.price",
											"1.19"
										]
									},
									{
										"cells": [
											"$.type",
											"DECK"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"skuUUID1",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf50a19b738ba001027e2b3\" is successfully saved as a text in Scenario Data Store [skuUUID1]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a sku",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 761,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create SKU\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 50,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/store/sku\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#skuId",
													"AAPIPH5-DC2-Y"
												]
											},
											{
												"cells": [
													"#price",
													"3.99"
												]
											},
											{
												"cells": [
													"#type",
													"DECK"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 28,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n \"skuId\":\"AAPIPH5-DC2-Y\",\n \"price\":3.99,\n \"type\":\"DECK\"\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 683,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/store/sku\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 529ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf50a19b738ba001027e2b4\",\n    \"skuId\": \"AAPIPH5-DC2-Y\",\n    \"price\": 3.99,\n    \"type\": \"DECK\"\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:41 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-dsrjh\nX-XSS-Protection=1; mode=block\nContent-Length=84\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the JSON Path Assertions for the response should be equal to the following",
									"table": {
										"headers": [
											"JSON Path",
											"Expected Result"
										],
										"rows": [
											{
												"cells": [
													"$.skuId",
													"AAPIPH5-DC2-Y"
												]
											},
											{
												"cells": [
													"$.price",
													"3.99"
												]
											},
											{
												"cells": [
													"$.type",
													"DECK"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"skuUUID2",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf50a19b738ba001027e2b4\" is successfully saved as a text in Scenario Data Store [skuUUID2]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Edit SKU\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 44,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/store/sku\n\n",
									"HTTP Method is: PUT\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"skuUUID",
											"y",
											"scenario",
											"skuUUID2",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [skuUUID2] is: \"5bf50a19b738ba001027e2b4\"\n\n",
									"Path parameters which will append to the request URL:/5bf50a19b738ba001027e2b4\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#skuId",
											"sampleSkuId2"
										]
									},
									{
										"cells": [
											"#price",
											"1.07"
										]
									},
									{
										"cells": [
											"#type",
											"DECK"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 24,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n \"skuId\":\"sampleSkuId2\",\n \"price\":1.07,\n \"type\":\"DECK\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 639,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/store/sku/5bf50a19b738ba001027e2b4\n\n",
									"HTTP Method is: PUT\n\n",
									"Response Time is: 504ms\n\n",
									"Response is: \n{\n    \"id\": \"5bf50a19b738ba001027e2b4\",\n    \"skuId\": \"sampleSkuId2\",\n    \"price\": 1.07,\n    \"type\": \"DECK\"\n}\n\n",
									"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:42 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-bdwm7\nX-XSS-Protection=1; mode=block\nContent-Length=83\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.skuId",
											"sampleSkuId2"
										]
									},
									{
										"cells": [
											"$.price",
											"1.07"
										]
									},
									{
										"cells": [
											"$.type",
											"DECK"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete SKU\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 46,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/store/sku\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"skuUUID",
											"y",
											"scenario",
											"skuUUID1",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [skuUUID1] is: \"5bf50a19b738ba001027e2b3\"\n\n",
									"Path parameters which will append to the request URL:/5bf50a19b738ba001027e2b3\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 641,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/store/sku/5bf50a19b738ba001027e2b3\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 505ms\n\n",
									"Response is Empty\n\n",
									"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:43 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-dsrjh\nX-XSS-Protection=1; mode=block\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete SKU\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 47,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/store/sku\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"skuUUID",
											"y",
											"scenario",
											"skuUUID2",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [skuUUID2] is: \"5bf50a19b738ba001027e2b4\"\n\n",
									"Path parameters which will append to the request URL:/5bf50a19b738ba001027e2b4\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 672,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/store/sku/5bf50a19b738ba001027e2b4\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 532ms\n\n",
									"Response is Empty\n\n",
									"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:32:44 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-hq9pm\nX-XSS-Protection=1; mode=block\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a my deck with all types of 9 questions",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1174)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:392)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:182)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [500]",
									"executionTime": 17423,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 44,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://aggregationservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"\"null\""
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"0"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"osan"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 27,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": null,\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00\",\n    \"notificationFrequency\": \"0\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"osan\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1262,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://aggregationservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 1104ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf50a1db738ba001027e2b5\",\n    \"title\": \"API Deck3\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00\",\n        \"notificationFrequency\": \"0\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785565348,\n        \"updatedAt\": 1542785565348\n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"osan\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:32:45.348Z\",\n    \"updatedAt\": \"2018-11-21T07:32:45.350Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"examReminder\": {\n        \"startDate\": 1510811542000,\n        \"endDate\": 1512021142000,\n        \"time\": \"08:00\"\n    },\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\ncorrelation-id=24a2ee0e-6052-4482-8823-fee788b3c66b\nDate=Wed, 21 Nov 2018 07:32:45 GMT\nServer=nginx\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-bdwm7\nX-XSS-Protection=1; mode=block\nContent-Length=1020\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"spec",
													"myDeckIdWith9Questions",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [
											"\"5bf50a1db738ba001027e2b5\" is successfully saved as a text in Specification Data Store [myDeckIdWith9Questions]"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 45,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://aggregationservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 29,
										"skippedReason": "",
										"messages": [
											"Text inside Specification Data Store [myDeckIdWith9Questions] is: \"5bf50a1db738ba001027e2b5\"\n\n",
											"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5bf50a1db738ba001027e2b5\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"MULTIPLE_CHOICE\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Osanda\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"Gemunu\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"Eranga\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Heshan\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Thilina\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 16016,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://aggregationservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/questions\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 15869ms\n\n",
											"Response is: \n{\n    \"timestamp\": 1542785581441,\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"exception\": \"com.pearson.question.aggregator.exceptions.BaseException\",\n    \"message\": \"{  \\\"status\\\" : 500,  \\\"code\\\" : 2000,  \\\"category\\\" : \\\"Program Error\\\",  \\\"reason\\\" : \\\"Internal server error\\\",  \\\"messages\\\" : [ \\\"java.net.SocketTimeoutException: Read timed out\\\" ]}\",\n    \"path\": \"/api/questions\"\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\ncorrelation-id=dc30daf8-6d7e-4ea4-bbe5-000efa995d9a\nDate=Wed, 21 Nov 2018 07:33:01 GMT\nServer=nginx\nContent-Length=367\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1174)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:392)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:182)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [500]",
										"executionTime": 17423,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"cardId2",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create All Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"ALL"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"cardId5",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"cardId8",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"questionId",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get all Questions using Aggregation Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the query parameters using data stores as follows",
							"table": {
								"headers": [
									"Query Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Query Value"
								],
								"rows": [
									{
										"cells": [
											"deckId",
											"y",
											"spec",
											"myDeckIdWith9Questions",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.questions.length()",
											"9"
										]
									},
									{
										"cells": [
											"$.questions.[-1].question.media",
											"TEXT"
										]
									},
									{
										"cells": [
											"$.questions.[-1].question.promptType",
											"TEXT"
										]
									},
									{
										"cells": [
											"$.questions.[-1].creatoredSource",
											"App"
										]
									},
									{
										"cells": [
											"$.questions.[-1].answers.[0].type",
											"TEXT"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 0,
			"failedScenarioCount": 1,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Form-Data Example Specification",
			"fileName": "C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\specs\\Other\\05. Form-Data Example.spec",
			"tags": [],
			"executionTime": 29209,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "Get Google OAuth Access token",
					"tags": [],
					"executionTime": 27,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get OAuth Access Token from Refresh Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\ncom.maxsoft.intelliapi.util.reader.ApiDocument.getAPIEndpoint(ApiDocument.java:67)\ncom.maxsoft.intelliapi.api.Endpoints.getApiEndpointByName(Endpoints.java:19)\ncom.maxsoft.intelliapi.api.Base.apiToBeInvoked(Base.java:403)\ncom.maxsoft.intelliapi.api.ApiStepImpl.apiToBeInvoked(ApiStepImpl.java:31)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.apiToBeInvoked(AllStepsDefinitions.java:38)\nsun.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: \"Get OAuth Access Token from Refresh Token\" API Endpoint Name is not exist in the API Document Excel file located in \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/api_document/qa_api_doc.xlsx\"",
								"executionTime": 27,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the form-data key value pairs as follows",
							"table": {
								"headers": [
									"Key",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"grant_type",
											"refresh_token"
										]
									},
									{
										"cells": [
											"client_id",
											"211897666304-ii96f12k6tf8h5k15sp41reo92osrgnm.apps.googleusercontent.com"
										]
									},
									{
										"cells": [
											"client_secret",
											"fILuyCiaWDRElAP6MdWcJIdK"
										]
									},
									{
										"cells": [
											"refresh_token",
											"1/3wu2nvsunxK3mYRDTPun_8t8GeBEKkY--LYfEr9SIvU"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.expires_in",
											"3600"
										]
									},
									{
										"cells": [
											"$.token_type",
											"Bearer"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Upload file",
					"tags": [],
					"executionTime": 29182,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 1052,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 47,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 23,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 982,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 853ms\n\n",
											"Response is: \n{\n    \"id\": \"5bf50a2eb738ba001027e2b6\",\n    \"title\": \"API Deck3\",\n    \"description\": \"test description\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00 AM\",\n        \"notificationFrequency\": \"5\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1542785582523,\n        \"updatedAt\": 1542785582523\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-11-21T07:33:02.523Z\",\n    \"updatedAt\": \"2018-11-21T07:33:02.525Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}\n\n",
											"Response Headers are: \nContent-Type=application/json;charset=UTF-8\nDate=Wed, 21 Nov 2018 07:33:02 GMT\nServer=nginx\nX-Application-Context=application:qa:8090\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-lxkkr\nX-XSS-Protection=1; mode=block\nContent-Length=1006\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"spec",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"5bf50a2eb738ba001027e2b6\" is successfully saved as a text in Specification Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"File Upload\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 45,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://aggregationservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/cards/file\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the form-data key value pairs using data stores as follows",
							"table": {
								"headers": [
									"Key",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"title",
											"n",
											"",
											"",
											"DOCX file"
										]
									},
									{
										"cells": [
											"creatorId",
											"n",
											"",
											"",
											"Osanda"
										]
									},
									{
										"cells": [
											"creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"creatoredSource",
											"n",
											"",
											"",
											"File"
										]
									},
									{
										"cells": [
											"creatoredType",
											"n",
											"",
											"",
											"Auto"
										]
									},
									{
										"cells": [
											"deckId",
											"y",
											"spec",
											"deckId",
											"5b123fa92e02d85d8b54c7b6"
										]
									},
									{
										"cells": [
											"isExpert",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"examDate",
											"n",
											"",
											"",
											""
										]
									},
									{
										"cells": [
											"userId",
											"n",
											"",
											"",
											"osanda"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [deckId] is: \"5bf50a2eb738ba001027e2b6\"\n\n",
									"Form Params Map: \n\n",
									"isExpert = false",
									"examDate = ",
									"creatorPlatform = Web",
									"creatoredType = Auto",
									"deckId = 5bf50a2eb738ba001027e2b6",
									"creatorId = Osanda",
									"creatoredSource = File",
									"title = DOCX file",
									"userId = osanda"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the multipart file key value pairs as follows",
							"table": {
								"headers": [
									"Key",
									"File Path",
									"Mime Type"
								],
								"rows": [
									{
										"cells": [
											"file",
											"/resources/docx_files/DOCX file1.docx",
											"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 28085,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://aggregationservice-pearson-prep-us1-qa.bite.pearsondev.tech/api/cards/file\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 27927ms\n\n",
									"Response is: \n{\n    \"timestamp\": 1542785610672,\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"exception\": \"com.pearson.question.aggregator.exceptions.BaseException\",\n    \"message\": \"{  \\\"status\\\" : 500,  \\\"code\\\" : 2000,  \\\"category\\\" : \\\"Program Error\\\",  \\\"reason\\\" : \\\"Internal server error\\\",  \\\"messages\\\" : [ \\\"java.net.SocketTimeoutException: Read timed out\\\" ]}\",\n    \"path\": \"/api/cards/file\"\n}\n\n",
									"Response Headers are: \nContent-Type=application/json;charset=UTF-8\ncorrelation-id=be95ed01-a1d6-473d-9c87-588bbfc346ff\nDate=Wed, 21 Nov 2018 07:33:30 GMT\nServer=nginx\nContent-Length=368\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1174)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:392)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:182)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [500]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.length()",
											"15"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 0,
			"failedScenarioCount": 2,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Epoch Time Specification",
			"fileName": "C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\specs\\Other\\08. Epoch Time.spec",
			"tags": [],
			"executionTime": 4,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Current Epoch time",
					"tags": [],
					"executionTime": 2,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user saves the current epoch time in \"Seconds\" inside data stores",
							"table": {
								"headers": [
									"Data Store Type",
									"Data Store Variable Name"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"currentEpochTime"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2,
								"skippedReason": "",
								"messages": [
									"\"1542785624\" is successfully saved as a text in Scenario Data Store [currentEpochTime]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user saves the current epoch time in \"Milliseconds\" inside data stores",
							"table": {
								"headers": [
									"Data Store Type",
									"Data Store Variable Name"
								],
								"rows": [
									{
										"cells": [
											"suite",
											"currentEpochTime"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"1542785624330\" is successfully saved as a text in Suite Data Store [currentEpochTime]"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Epoch time for a given timestamp",
					"tags": [],
					"executionTime": 2,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user converts the \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" formatted \"2018-09-25T11:56:00.000-0000\" timestamp into epoch time in \"Seconds\" and saves inside data stores",
							"table": {
								"headers": [
									"Data Store Type",
									"Data Store Variable Name"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"epochTime"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2,
								"skippedReason": "",
								"messages": [
									"\"1537876560\" is successfully saved as a text in Scenario Data Store [epochTime]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user converts the \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" formatted \"2018-09-25T11:56:00.000-0000\" timestamp into epoch time in \"Milliseconds\" and saves inside data stores",
							"table": {
								"headers": [
									"Data Store Type",
									"Data Store Variable Name"
								],
								"rows": [
									{
										"cells": [
											"suite",
											"epochTime"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"1537876560000\" is successfully saved as a text in Suite Data Store [epochTime]"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 2,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Get Student Availability - Negative Tests Specification - 404 Error",
			"fileName": "C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\specs\\Other\\09. Get Student Availablity - Negative Tests - 404 Error.spec",
			"tags": [],
			"executionTime": 16,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "Get Student Availability 404 Not Found",
					"tags": [],
					"executionTime": 16,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Student Availability\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\ncom.maxsoft.intelliapi.util.reader.ApiDocument.getAPIEndpoint(ApiDocument.java:67)\ncom.maxsoft.intelliapi.api.Endpoints.getApiEndpointByName(Endpoints.java:19)\ncom.maxsoft.intelliapi.api.Base.apiToBeInvoked(Base.java:403)\ncom.maxsoft.intelliapi.api.ApiStepImpl.apiToBeInvoked(ApiStepImpl.java:31)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.apiToBeInvoked(AllStepsDefinitions.java:38)\nsun.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: \"Get Student Availability\" API Endpoint Name is not exist in the API Document Excel file located in \"C:\\Users\\Onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI-Demo\\resources/api_document/qa_api_doc.xlsx\"",
								"executionTime": 16,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"availability",
											"n",
											"",
											"",
											"availability"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attibute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#courseId",
											"n",
											"scenario",
											"courseId",
											"1235"
										]
									},
									{
										"cells": [
											"#userId1",
											"n",
											"scenario",
											"userId1",
											"1"
										]
									},
									{
										"cells": [
											"#userId2",
											"n",
											"scenario",
											"userId2",
											"116"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"404\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Invalid student Ids: [116]"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 0,
			"failedScenarioCount": 1,
			"skippedScenarioCount": 0
		}
	],
	"beforeSuiteHookFailure": null,
	"afterSuiteHookFailure": null,
	"passedSpecsCount": 7,
	"failedSpecsCount": 6,
	"skippedSpecsCount": 0,
	"passedScenariosCount": 22,
	"failedScenariosCount": 7,
	"skippedScenariosCount": 0
}